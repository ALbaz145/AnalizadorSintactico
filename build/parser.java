
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\007\000\002\004\003\000\002\004\004\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\012" +
    "\006\000\002\012\006\000\002\006\005\000\002\013\006" +
    "\000\002\007\007\000\002\010\007\000\002\011\013\000" +
    "\002\014\011\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\040\002\ufffe\007\031\014\022\032\033\034" +
    "\007\035\025\042\030\043\006\052\012\060\015\061\004" +
    "\066\020\070\027\072\017\074\011\001\002\000\004\074" +
    "\116\001\002\000\042\002\ufffb\007\ufffb\014\ufffb\031\ufffb" +
    "\032\ufffb\034\ufffb\035\ufffb\042\ufffb\043\ufffb\052\ufffb\060" +
    "\ufffb\061\ufffb\066\ufffb\070\ufffb\072\ufffb\074\ufffb\001\002" +
    "\000\004\041\112\001\002\000\004\041\106\001\002\000" +
    "\004\044\105\001\002\000\016\004\076\006\101\015\100" +
    "\027\077\040\uffe5\044\uffe5\001\002\000\004\074\073\001" +
    "\002\000\004\002\072\001\002\000\042\002\ufff9\007\ufff9" +
    "\014\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9\042\ufff9\043" +
    "\ufff9\052\ufff9\060\ufff9\061\ufff9\066\ufff9\070\ufff9\072\ufff9" +
    "\074\ufff9\001\002\000\004\074\067\001\002\000\042\002" +
    "\ufffe\007\031\014\022\031\ufffe\032\033\034\007\035\025" +
    "\042\030\043\006\052\012\060\015\061\004\066\020\070" +
    "\027\072\017\074\011\001\002\000\004\012\063\001\002" +
    "\000\004\074\060\001\002\000\042\002\ufffa\007\ufffa\014" +
    "\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\042\ufffa\043\ufffa" +
    "\052\ufffa\060\ufffa\061\ufffa\066\ufffa\070\ufffa\072\ufffa\074" +
    "\ufffa\001\002\000\004\074\056\001\002\000\004\044\055" +
    "\001\002\000\042\002\ufffc\007\ufffc\014\ufffc\031\ufffc\032" +
    "\ufffc\034\ufffc\035\ufffc\042\ufffc\043\ufffc\052\ufffc\060\ufffc" +
    "\061\ufffc\066\ufffc\070\ufffc\072\ufffc\074\ufffc\001\002\000" +
    "\006\040\uffe4\044\uffe4\001\002\000\042\002\ufff7\007\ufff7" +
    "\014\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\042\ufff7\043" +
    "\ufff7\052\ufff7\060\ufff7\061\ufff7\066\ufff7\070\ufff7\072\ufff7" +
    "\074\ufff7\001\002\000\004\074\052\001\002\000\004\041" +
    "\046\001\002\000\004\041\036\001\002\000\004\002\001" +
    "\001\002\000\040\007\031\014\022\031\ufffe\032\033\034" +
    "\007\035\025\042\030\043\006\052\012\060\015\061\004" +
    "\066\020\070\027\072\017\074\011\001\002\000\004\031" +
    "\035\001\002\000\042\002\ufff0\007\ufff0\014\ufff0\031\ufff0" +
    "\032\ufff0\034\ufff0\035\ufff0\042\ufff0\043\ufff0\052\ufff0\060" +
    "\ufff0\061\ufff0\066\ufff0\070\ufff0\072\ufff0\074\ufff0\001\002" +
    "\000\014\052\012\060\015\061\004\066\020\070\027\001" +
    "\002\000\004\044\040\001\002\000\010\014\022\035\025" +
    "\074\011\001\002\000\004\044\042\001\002\000\010\014" +
    "\022\035\025\074\011\001\002\000\004\040\044\001\002" +
    "\000\036\007\031\014\022\032\033\034\007\035\025\042" +
    "\030\043\006\052\012\060\015\061\004\066\020\070\027" +
    "\072\017\074\011\001\002\000\042\002\uffec\007\uffec\014" +
    "\uffec\031\uffec\032\uffec\034\uffec\035\uffec\042\uffec\043\uffec" +
    "\052\uffec\060\uffec\061\uffec\066\uffec\070\uffec\072\uffec\074" +
    "\uffec\001\002\000\010\014\022\035\025\074\011\001\002" +
    "\000\004\040\050\001\002\000\036\007\031\014\022\032" +
    "\033\034\007\035\025\042\030\043\006\052\012\060\015" +
    "\061\004\066\020\070\027\072\017\074\011\001\002\000" +
    "\042\002\uffee\007\uffee\014\uffee\031\uffee\032\uffee\034\uffee" +
    "\035\uffee\042\uffee\043\uffee\052\uffee\060\uffee\061\uffee\066" +
    "\uffee\070\uffee\072\uffee\074\uffee\001\002\000\004\005\053" +
    "\001\002\000\010\014\022\035\025\074\011\001\002\000" +
    "\004\044\ufff1\001\002\000\042\002\ufffd\007\ufffd\014\ufffd" +
    "\031\ufffd\032\ufffd\034\ufffd\035\ufffd\042\ufffd\043\ufffd\052" +
    "\ufffd\060\ufffd\061\ufffd\066\ufffd\070\ufffd\072\ufffd\074\ufffd" +
    "\001\002\000\004\014\057\001\002\000\006\040\uffe9\044" +
    "\uffe9\001\002\000\004\005\061\001\002\000\010\014\022" +
    "\035\025\074\011\001\002\000\004\044\ufff2\001\002\000" +
    "\004\074\064\001\002\000\036\007\031\014\022\032\033" +
    "\034\007\035\025\042\030\043\006\052\012\060\015\061" +
    "\004\066\020\070\027\072\017\074\011\001\002\000\042" +
    "\002\uffef\007\uffef\014\uffef\031\uffef\032\uffef\034\uffef\035" +
    "\uffef\042\uffef\043\uffef\052\uffef\060\uffef\061\uffef\066\uffef" +
    "\070\uffef\072\uffef\074\uffef\001\002\000\006\002\uffff\031" +
    "\uffff\001\002\000\004\005\070\001\002\000\010\014\022" +
    "\035\025\074\011\001\002\000\004\044\ufff5\001\002\000" +
    "\004\002\000\001\002\000\004\005\074\001\002\000\004" +
    "\006\075\001\002\000\004\044\ufff3\001\002\000\004\074" +
    "\104\001\002\000\006\040\uffe6\044\uffe6\001\002\000\004" +
    "\035\103\001\002\000\004\035\102\001\002\000\006\040" +
    "\uffe7\044\uffe7\001\002\000\006\040\uffea\044\uffea\001\002" +
    "\000\006\040\uffe8\044\uffe8\001\002\000\042\002\ufff6\007" +
    "\ufff6\014\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6\042\ufff6" +
    "\043\ufff6\052\ufff6\060\ufff6\061\ufff6\066\ufff6\070\ufff6\072" +
    "\ufff6\074\ufff6\001\002\000\010\014\022\035\025\074\011" +
    "\001\002\000\004\040\110\001\002\000\004\044\111\001" +
    "\002\000\042\002\ufff8\007\ufff8\014\ufff8\031\ufff8\032\ufff8" +
    "\034\ufff8\035\ufff8\042\ufff8\043\ufff8\052\ufff8\060\ufff8\061" +
    "\ufff8\066\ufff8\070\ufff8\072\ufff8\074\ufff8\001\002\000\010" +
    "\014\022\035\025\074\011\001\002\000\004\040\114\001" +
    "\002\000\036\007\031\014\022\032\033\034\007\035\025" +
    "\042\030\043\006\052\012\060\015\061\004\066\020\070" +
    "\027\072\017\074\011\001\002\000\042\002\uffed\007\uffed" +
    "\014\uffed\031\uffed\032\uffed\034\uffed\035\uffed\042\uffed\043" +
    "\uffed\052\uffed\060\uffed\061\uffed\066\uffed\070\uffed\072\uffed" +
    "\074\uffed\001\002\000\004\005\117\001\002\000\010\014" +
    "\022\035\025\074\011\001\002\000\004\044\ufff4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\026\002\012\003\031\004\015\005\007\006" +
    "\025\007\023\010\004\011\020\012\022\013\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\065\004\015\005\007\006\025\007\023" +
    "\010\004\011\020\012\022\013\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\033\004\015\005" +
    "\007\006\025\007\023\010\004\011\020\012\022\013\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\036\001\001\000\002\001\001\000\004\005\040\001\001" +
    "\000\002\001\001\000\004\005\042\001\001\000\002\001" +
    "\001\000\022\004\044\005\007\006\025\007\023\010\004" +
    "\011\020\012\022\013\013\001\001\000\002\001\001\000" +
    "\004\005\046\001\001\000\002\001\001\000\022\004\050" +
    "\005\007\006\025\007\023\010\004\011\020\012\022\013" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\064\005\007\006\025\007\023\010\004\011\020" +
    "\012\022\013\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\112\001\001\000\002\001\001" +
    "\000\022\004\114\005\007\006\025\007\023\010\004\011" +
    "\020\012\022\013\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\117\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instrucciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruccion ::= Declaracion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruccion ::= declIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruccion ::= declWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruccion ::= declFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruccion ::= declClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruccion ::= muestraTEXTO parIZQ Expresion parDER puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruccion ::= Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruccion ::= Expresion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaracion ::= tipoDatoNUM ID ASIGNACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaracion ::= tipoDatoNumDecimal ID ASIGNACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaracion ::= tipoDatoBool ID ASIGNACION BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaracion ::= tipoDatoTEXT ID ASIGNACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declaracion ::= tipoDatoVARIABLE ID ASIGNACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bloque ::= llaveIZQ Instrucciones llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declClase ::= VISIBILIDAD CLASS ID Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declClase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declIf ::= preguntaCONDICIONAL parIZQ Expresion parDER Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declIf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declWhile ::= preguntaWHILE parIZQ Expresion parDER Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declWhile",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declFor ::= bucleCONTADOR parIZQ Declaracion puntoCOMA Expresion puntoCOMA Expresion parDER Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ctrlError ::= intentaERROR Instruccion manejaERROR parIZQ ID parDER Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrlError",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= ID COMPARACION NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= COMILLA ID COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= ID ARITMETICOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= ID BOOLEANO NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= ID INCREDECRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
