
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\045\005" +
    "\000\002\005\004\000\002\006\004\000\002\006\002\000" +
    "\002\035\006\000\002\054\005\000\002\055\003\000\002" +
    "\056\004\000\002\056\002\000\002\057\004\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\007\003" +
    "\000\002\010\002\000\002\010\004\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\007" +
    "\000\002\011\004\000\002\015\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\005\000\002\024" +
    "\002\000\002\024\004\000\002\025\005\000\002\026\002" +
    "\000\002\026\006\000\002\027\005\000\002\030\002\000" +
    "\002\030\004\000\002\031\005\000\002\032\002\000\002" +
    "\032\004\000\002\033\005\000\002\034\002\000\002\034" +
    "\004\000\002\017\007\000\002\020\007\000\002\021\013" +
    "\000\002\036\006\000\002\037\011\000\002\040\004\000" +
    "\002\041\004\000\002\041\002\000\002\042\010\000\002" +
    "\043\010\000\002\044\003\000\002\044\005\000\002\060" +
    "\004\000\002\051\003\000\002\051\003\000\002\046\010" +
    "\000\002\047\011\000\002\050\013\000\002\052\003\000" +
    "\002\052\005\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\033\007\001\002\000\004\002\276\001" +
    "\002\000\006\033\007\101\ufffd\001\002\000\004\101\014" +
    "\001\002\000\004\057\010\001\002\000\004\051\011\001" +
    "\002\000\006\033\ufffc\101\ufffc\001\002\000\004\002\001" +
    "\001\002\000\006\002\ufff9\101\014\001\002\000\004\012" +
    "\015\001\002\000\004\103\016\001\002\000\004\035\017" +
    "\001\002\000\022\023\022\034\ufff4\061\032\064\033\067" +
    "\034\070\023\075\035\077\041\001\002\000\006\002\ufff8" +
    "\101\ufff8\001\002\000\022\023\022\034\ufff4\061\032\064" +
    "\033\067\034\070\023\075\035\077\041\001\002\000\004" +
    "\103\253\001\002\000\004\103\245\001\002\000\022\023" +
    "\ufff2\034\ufff2\061\ufff2\064\ufff2\067\ufff2\070\ufff2\075\ufff2" +
    "\077\ufff2\001\002\000\004\051\uffcf\001\002\000\022\023" +
    "\ufff1\034\ufff1\061\ufff1\064\ufff1\067\ufff1\070\ufff1\075\ufff1" +
    "\077\ufff1\001\002\000\022\023\ufff0\034\ufff0\061\ufff0\064" +
    "\ufff0\067\ufff0\070\ufff0\075\ufff0\077\ufff0\001\002\000\004" +
    "\021\232\001\002\000\004\034\231\001\002\000\004\103" +
    "\225\001\002\000\004\103\104\001\002\000\006\021\uffb0" +
    "\103\100\001\002\000\006\021\uffaf\103\074\001\002\000" +
    "\004\051\073\001\002\000\004\051\uffd0\001\002\000\004" +
    "\051\uffce\001\002\000\004\103\045\001\002\000\004\034" +
    "\ufff6\001\002\000\004\051\uffd1\001\002\000\004\051\uffcd" +
    "\001\002\000\006\005\047\051\uffbf\001\002\000\004\051" +
    "\uffc0\001\002\000\012\006\056\040\051\057\052\103\050" +
    "\001\002\000\022\004\064\013\uffdc\016\066\020\uffdc\024" +
    "\uffdc\030\065\044\uffdc\051\uffdc\001\002\000\020\004\057" +
    "\013\uffda\016\060\020\uffda\024\uffda\044\uffda\051\uffda\001" +
    "\002\000\014\013\uffdb\020\uffdb\024\uffdb\044\uffdb\051\uffdb" +
    "\001\002\000\014\013\uffdf\020\uffdf\024\uffdf\044\uffdf\051" +
    "\uffdf\001\002\000\014\013\uffde\020\uffde\024\uffde\044\uffde" +
    "\051\uffde\001\002\000\004\051\uffbe\001\002\000\014\013" +
    "\uffd9\020\uffd9\024\uffd9\044\uffd9\051\uffd9\001\002\000\006" +
    "\040\062\103\063\001\002\000\004\103\061\001\002\000" +
    "\014\013\uffd6\020\uffd6\024\uffd6\044\uffd6\051\uffd6\001\002" +
    "\000\014\013\uffd2\020\uffd2\024\uffd2\044\uffd2\051\uffd2\001" +
    "\002\000\014\013\uffd3\020\uffd3\024\uffd3\044\uffd3\051\uffd3" +
    "\001\002\000\006\040\072\103\071\001\002\000\014\013" +
    "\uffdd\020\uffdd\024\uffdd\044\uffdd\051\uffdd\001\002\000\006" +
    "\040\070\103\067\001\002\000\014\013\uffd8\020\uffd8\024" +
    "\uffd8\044\uffd8\051\uffd8\001\002\000\014\013\uffd7\020\uffd7" +
    "\024\uffd7\044\uffd7\051\uffd7\001\002\000\014\013\uffd5\020" +
    "\uffd5\024\uffd5\044\uffd5\051\uffd5\001\002\000\014\013\uffd4" +
    "\020\uffd4\024\uffd4\044\uffd4\051\uffd4\001\002\000\022\023" +
    "\ufff3\034\ufff3\061\ufff3\064\ufff3\067\ufff3\070\ufff3\075\ufff3" +
    "\077\ufff3\001\002\000\006\005\075\051\uffc2\001\002\000" +
    "\004\057\077\001\002\000\004\051\uffc3\001\002\000\004" +
    "\051\uffc1\001\002\000\006\005\101\051\uffcb\001\002\000" +
    "\004\040\103\001\002\000\004\051\uffcc\001\002\000\004" +
    "\051\uffca\001\002\000\004\035\105\001\002\000\046\006" +
    "\056\007\120\027\117\031\122\034\uffee\037\113\040\051" +
    "\046\130\047\134\054\111\057\052\061\032\064\033\067" +
    "\034\070\023\075\035\077\041\103\124\001\002\000\052" +
    "\006\uffa9\007\uffa9\023\uffa9\027\uffa9\031\uffa9\034\uffa9\037" +
    "\uffa9\040\uffa9\046\uffa9\047\uffa9\053\uffa9\054\uffa9\057\uffa9" +
    "\061\uffa9\064\uffa9\067\uffa9\070\uffa9\075\uffa9\077\uffa9\103" +
    "\uffa9\001\002\000\004\034\uffef\001\002\000\050\006\uffe8" +
    "\007\uffe8\027\uffe8\031\uffe8\034\uffe8\037\uffe8\040\uffe8\046" +
    "\uffe8\047\uffe8\053\uffe8\054\uffe8\057\uffe8\061\uffe8\064\uffe8" +
    "\067\uffe8\070\uffe8\075\uffe8\077\uffe8\103\uffe8\001\002\000" +
    "\004\045\205\001\002\000\050\006\uffe5\007\uffe5\027\uffe5" +
    "\031\uffe5\034\uffe5\037\uffe5\040\uffe5\046\uffe5\047\uffe5\053" +
    "\uffe5\054\uffe5\057\uffe5\061\uffe5\064\uffe5\067\uffe5\070\uffe5" +
    "\075\uffe5\077\uffe5\103\uffe5\001\002\000\004\045\201\001" +
    "\002\000\050\006\uffe7\007\uffe7\027\uffe7\031\uffe7\034\uffe7" +
    "\037\uffe7\040\uffe7\046\uffe7\047\uffe7\053\uffe7\054\uffe7\057" +
    "\uffe7\061\uffe7\064\uffe7\067\uffe7\070\uffe7\075\uffe7\077\uffe7" +
    "\103\uffe7\001\002\000\050\006\uffea\007\uffea\027\uffea\031" +
    "\uffea\034\uffea\037\uffea\040\uffea\046\uffea\047\uffea\053\uffea" +
    "\054\uffea\057\uffea\061\uffea\064\uffea\067\uffea\070\uffea\075" +
    "\uffea\077\uffea\103\uffea\001\002\000\004\034\200\001\002" +
    "\000\004\023\173\001\002\000\004\045\161\001\002\000" +
    "\050\006\uffe3\007\uffe3\027\uffe3\031\uffe3\034\uffe3\037\uffe3" +
    "\040\uffe3\046\uffe3\047\uffe3\053\uffe3\054\uffe3\057\uffe3\061" +
    "\uffe3\064\uffe3\067\uffe3\070\uffe3\075\uffe3\077\uffe3\103\uffe3" +
    "\001\002\000\004\035\105\001\002\000\046\006\056\007" +
    "\120\027\117\031\122\034\uffee\037\113\040\051\046\130" +
    "\047\134\054\111\057\052\061\032\064\033\067\034\070" +
    "\023\075\035\077\041\103\124\001\002\000\014\004\064" +
    "\016\066\030\065\050\147\051\uffdc\001\002\000\050\006" +
    "\uffe4\007\uffe4\027\uffe4\031\uffe4\034\uffe4\037\uffe4\040\uffe4" +
    "\046\uffe4\047\uffe4\053\uffe4\054\uffe4\057\uffe4\061\uffe4\064" +
    "\uffe4\067\uffe4\070\uffe4\075\uffe4\077\uffe4\103\uffe4\001\002" +
    "\000\050\006\uffeb\007\uffeb\027\uffeb\031\uffeb\034\uffeb\037" +
    "\uffeb\040\uffeb\046\uffeb\047\uffeb\053\uffeb\054\uffeb\057\uffeb" +
    "\061\uffeb\064\uffeb\067\uffeb\070\uffeb\075\uffeb\077\uffeb\103" +
    "\uffeb\001\002\000\050\006\uffe6\007\uffe6\027\uffe6\031\uffe6" +
    "\034\uffe6\037\uffe6\040\uffe6\046\uffe6\047\uffe6\053\uffe6\054" +
    "\uffe6\057\uffe6\061\uffe6\064\uffe6\067\uffe6\070\uffe6\075\uffe6" +
    "\077\uffe6\103\uffe6\001\002\000\004\045\143\001\002\000" +
    "\004\051\142\001\002\000\050\006\uffe9\007\uffe9\027\uffe9" +
    "\031\uffe9\034\uffe9\037\uffe9\040\uffe9\046\uffe9\047\uffe9\053" +
    "\uffe9\054\uffe9\057\uffe9\061\uffe9\064\uffe9\067\uffe9\070\uffe9" +
    "\075\uffe9\077\uffe9\103\uffe9\001\002\000\004\051\141\001" +
    "\002\000\004\045\135\001\002\000\012\006\056\040\051" +
    "\057\052\103\050\001\002\000\004\044\137\001\002\000" +
    "\004\035\105\001\002\000\050\006\uffbc\007\uffbc\027\uffbc" +
    "\031\uffbc\034\uffbc\037\uffbc\040\uffbc\046\uffbc\047\uffbc\053" +
    "\uffbc\054\uffbc\057\uffbc\061\uffbc\064\uffbc\067\uffbc\070\uffbc" +
    "\075\uffbc\077\uffbc\103\uffbc\001\002\000\050\006\uffe1\007" +
    "\uffe1\027\uffe1\031\uffe1\034\uffe1\037\uffe1\040\uffe1\046\uffe1" +
    "\047\uffe1\053\uffe1\054\uffe1\057\uffe1\061\uffe1\064\uffe1\067" +
    "\uffe1\070\uffe1\075\uffe1\077\uffe1\103\uffe1\001\002\000\050" +
    "\006\uffec\007\uffec\027\uffec\031\uffec\034\uffec\037\uffec\040" +
    "\uffec\046\uffec\047\uffec\053\uffec\054\uffec\057\uffec\061\uffec" +
    "\064\uffec\067\uffec\070\uffec\075\uffec\077\uffec\103\uffec\001" +
    "\002\000\012\006\056\040\051\057\052\103\050\001\002" +
    "\000\004\044\145\001\002\000\004\035\105\001\002\000" +
    "\050\006\uffbd\007\uffbd\027\uffbd\031\uffbd\034\uffbd\037\uffbd" +
    "\040\uffbd\046\uffbd\047\uffbd\053\uffbd\054\uffbd\057\uffbd\061" +
    "\uffbd\064\uffbd\067\uffbd\070\uffbd\075\uffbd\077\uffbd\103\uffbd" +
    "\001\002\000\004\043\150\001\002\000\004\045\151\001" +
    "\002\000\004\103\152\001\002\000\004\044\153\001\002" +
    "\000\004\051\154\001\002\000\050\006\uffad\007\uffad\027" +
    "\uffad\031\uffad\034\uffad\037\uffad\040\uffad\046\uffad\047\uffad" +
    "\053\uffad\054\uffad\057\uffad\061\uffad\064\uffad\067\uffad\070" +
    "\uffad\075\uffad\077\uffad\103\uffad\001\002\000\004\034\uffed" +
    "\001\002\000\004\036\157\001\002\000\004\035\105\001" +
    "\002\000\050\006\uffba\007\uffba\027\uffba\031\uffba\034\uffba" +
    "\037\uffba\040\uffba\046\uffba\047\uffba\053\uffba\054\uffba\057" +
    "\uffba\061\uffba\064\uffba\067\uffba\070\uffba\075\uffba\077\uffba" +
    "\103\uffba\001\002\000\014\061\032\067\164\070\023\075" +
    "\162\077\041\001\002\000\004\103\074\001\002\000\004" +
    "\051\165\001\002\000\004\103\100\001\002\000\012\006" +
    "\056\040\051\057\052\103\050\001\002\000\004\051\167" +
    "\001\002\000\012\006\056\040\051\057\052\103\050\001" +
    "\002\000\004\044\171\001\002\000\004\035\105\001\002" +
    "\000\050\006\uffbb\007\uffbb\027\uffbb\031\uffbb\034\uffbb\037" +
    "\uffbb\040\uffbb\046\uffbb\047\uffbb\053\uffbb\054\uffbb\057\uffbb" +
    "\061\uffbb\064\uffbb\067\uffbb\070\uffbb\075\uffbb\077\uffbb\103" +
    "\uffbb\001\002\000\004\103\174\001\002\000\004\045\175" +
    "\001\002\000\004\044\176\001\002\000\004\035\105\001" +
    "\002\000\050\006\uffae\007\uffae\027\uffae\031\uffae\034\uffae" +
    "\037\uffae\040\uffae\046\uffae\047\uffae\053\uffae\054\uffae\057" +
    "\uffae\061\uffae\064\uffae\067\uffae\070\uffae\075\uffae\077\uffae" +
    "\103\uffae\001\002\000\054\006\uffe0\007\uffe0\023\uffe0\027" +
    "\uffe0\031\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\046\uffe0" +
    "\047\uffe0\053\uffe0\054\uffe0\057\uffe0\061\uffe0\064\uffe0\067" +
    "\uffe0\070\uffe0\075\uffe0\077\uffe0\103\uffe0\001\002\000\012" +
    "\006\056\040\051\057\052\103\050\001\002\000\004\044" +
    "\203\001\002\000\004\051\204\001\002\000\050\006\uffe2" +
    "\007\uffe2\027\uffe2\031\uffe2\034\uffe2\037\uffe2\040\uffe2\046" +
    "\uffe2\047\uffe2\053\uffe2\054\uffe2\057\uffe2\061\uffe2\064\uffe2" +
    "\067\uffe2\070\uffe2\075\uffe2\077\uffe2\103\uffe2\001\002\000" +
    "\012\006\056\040\051\057\052\103\050\001\002\000\004" +
    "\044\207\001\002\000\004\035\210\001\002\000\004\010" +
    "\212\001\002\000\006\010\212\034\uffb6\001\002\000\012" +
    "\006\056\040\051\057\052\103\050\001\002\000\004\034" +
    "\214\001\002\000\050\006\uffb9\007\uffb9\027\uffb9\031\uffb9" +
    "\034\uffb9\037\uffb9\040\uffb9\046\uffb9\047\uffb9\053\uffb9\054" +
    "\uffb9\057\uffb9\061\uffb9\064\uffb9\067\uffb9\070\uffb9\075\uffb9" +
    "\077\uffb9\103\uffb9\001\002\000\004\024\216\001\002\000" +
    "\044\006\056\007\120\027\117\031\122\037\113\040\051" +
    "\046\130\047\134\054\111\057\052\061\032\064\033\067" +
    "\034\070\023\075\035\077\041\103\124\001\002\000\004" +
    "\053\220\001\002\000\004\051\221\001\002\000\006\010" +
    "\uffb5\034\uffb5\001\002\000\004\034\uffb8\001\002\000\006" +
    "\010\212\034\uffb6\001\002\000\004\034\uffb7\001\002\000" +
    "\006\005\226\051\uffc5\001\002\000\004\006\230\001\002" +
    "\000\004\051\uffc6\001\002\000\004\051\uffc4\001\002\000" +
    "\006\002\ufff7\101\ufff7\001\002\000\004\020\233\001\002" +
    "\000\004\103\234\001\002\000\004\005\235\001\002\000" +
    "\004\021\236\001\002\000\012\006\056\040\051\057\052" +
    "\103\050\001\002\000\004\020\243\001\002\000\006\013" +
    "\241\020\uffab\001\002\000\012\006\056\040\051\057\052" +
    "\103\050\001\002\000\004\020\uffaa\001\002\000\004\051" +
    "\244\001\002\000\052\006\uffac\007\uffac\023\uffac\027\uffac" +
    "\031\uffac\034\uffac\037\uffac\040\uffac\046\uffac\047\uffac\053" +
    "\uffac\054\uffac\057\uffac\061\uffac\064\uffac\067\uffac\070\uffac" +
    "\075\uffac\077\uffac\103\uffac\001\002\000\006\005\246\051" +
    "\uffc8\001\002\000\004\040\250\001\002\000\004\051\uffc9" +
    "\001\002\000\004\050\251\001\002\000\004\040\252\001" +
    "\002\000\004\051\uffc7\001\002\000\004\045\254\001\002" +
    "\000\006\067\261\075\257\001\002\000\006\013\265\044" +
    "\uffb3\001\002\000\004\103\264\001\002\000\004\103\uffaf" +
    "\001\002\000\004\044\262\001\002\000\004\103\uffb0\001" +
    "\002\000\004\035\105\001\002\000\022\023\uffb4\034\uffb4" +
    "\061\uffb4\064\uffb4\067\uffb4\070\uffb4\075\uffb4\077\uffb4\001" +
    "\002\000\006\013\uffb1\044\uffb1\001\002\000\006\067\261" +
    "\075\257\001\002\000\004\044\uffb2\001\002\000\004\034" +
    "\ufff5\001\002\000\006\002\ufff9\101\014\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\ufffa\001\002\000\006\033" +
    "\007\101\ufffd\001\002\000\004\101\uffff\001\002\000\004" +
    "\101\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\010\002\003\003\005\045\004\001\001\000" +
    "\002\001\001\000\006\004\273\045\272\001\001\000\006" +
    "\005\011\035\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\270" +
    "\035\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\017\001\001\000\034\022\035\023\042\025\036" +
    "\027\024\031\037\033\043\043\023\050\025\051\027\053" +
    "\026\055\030\056\041\057\020\001\001\000\002\001\001" +
    "\000\032\022\035\023\042\025\036\027\024\031\037\033" +
    "\043\043\023\050\025\051\027\053\026\056\266\057\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\045\001\001\000\002\001\001\000\010\012" +
    "\054\013\052\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\105\001\001\000" +
    "\056\007\115\010\106\011\122\012\132\013\052\014\053" +
    "\017\114\020\131\021\107\022\130\023\042\025\036\027" +
    "\024\031\037\033\043\036\124\037\120\046\125\047\111" +
    "\050\113\051\027\053\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\155\001\001\000\056\007" +
    "\154\010\106\011\122\012\132\013\052\014\053\017\114" +
    "\020\131\021\107\022\130\023\042\025\036\027\024\031" +
    "\037\033\043\036\124\037\120\046\125\047\111\050\113" +
    "\051\027\053\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\135\013\052\014\053\001\001" +
    "\000\002\001\001\000\004\015\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\143" +
    "\013\052\014\053\001\001\000\002\001\001\000\004\015" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\157\001\001\000\002\001\001\000\016\022" +
    "\162\023\042\025\036\027\024\031\037\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\165\013\052\014\053\001\001\000\002\001\001" +
    "\000\010\012\167\013\052\014\053\001\001\000\002\001" +
    "\001\000\004\015\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\201\013\052\014\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\205\013\052" +
    "\014\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\212\042\210\001\001\000\006\041\221\042\222" +
    "\001\001\000\010\012\214\013\052\014\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\011\216\012\132\013\052\014\053\017\114\020\131\021" +
    "\107\022\130\023\042\025\036\027\024\031\037\033\043" +
    "\036\124\037\120\046\125\047\111\050\113\051\027\053" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\223\042\222\001" +
    "\001\000\002\001\001\000\004\030\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\237\013\052\014\053\052" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\237\013\052\014\053\052\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\257\051\255\060\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\044\265\051\255\060\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\271\035\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\274\045\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            int line = s.left;
            String token = (s.value == null) ? " " : s.value.toString();
            System.err.println("ERROR sintáctico en línea " + line + ": Token inesperado '" + token + "'");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Importaciones Clases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Importaciones ::= imp ImportacionM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importaciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportacionM ::= imp ImportacionM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportacionM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ImportacionM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportacionM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imp ::= IMPORTACION STRING puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("imp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Clases ::= declClase ClaseM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Clases",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClaseM ::= declClase ClaseM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClaseM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClaseM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClaseM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declClase ::= VISIBILIDAD CLASS ID BloqueClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declClase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueClase ::= llaveIZQ MiembrosClase llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BloqueClase",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MiembrosClase ::= MiembrosClaseM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MiembrosClase",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MiembrosClaseM ::= Miembro MiembrosClaseM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MiembrosClaseM",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MiembrosClaseM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MiembrosClaseM",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Miembro ::= Declaracion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Miembro ::= declFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Miembro ::= declArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Miembro ::= declEnum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CuerpoInstrucciones ::= CuerpoInstruccionesM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoInstrucciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CuerpoInstruccionesM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoInstruccionesM",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CuerpoInstruccionesM ::= Instruccion CuerpoInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoInstruccionesM",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruccion ::= Declaracion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruccion ::= declSync 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= declIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Instruccion ::= declWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= declFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= declArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= declEnum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= cicloCADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= ctrlError 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= declSwitch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= muestraTEXTO parIZQ Expresion parDER puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= Expresion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bloque ::= llaveIZQ CuerpoInstrucciones llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= ExpresionComparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= ID INCREDECRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionComparacion ::= ID COMPARACION ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpresionComparacion ::= ID COMPARACION NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpresionComparacion ::= NUMERO COMPARACION ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpresionAritmetica ::= ID ARITMETICOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpresionAritmetica ::= ID ARITMETICOS NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpresionAritmetica ::= NUMERO ARITMETICOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionAritmetica ::= NUMERO ARITMETICOS NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Declaracion ::= DeclaracionInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Declaracion ::= DeclaracionFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Declaracion ::= DeclaracionBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Declaracion ::= DeclaracionString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Declaracion ::= DeclaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DeclaracionInt ::= tipoDatoNUM ID DeclaracionIntM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionInt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DeclaracionIntM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionIntM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DeclaracionIntM ::= ASIGNACION NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionIntM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DeclaracionFloat ::= tipoDatoNumDecimal ID DeclaracionFloatM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFloat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DeclaracionFloatM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFloatM",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DeclaracionFloatM ::= ASIGNACION NUMERO PUNTO NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFloatM",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DeclaracionBool ::= tipoDatoBool ID DeclaracionBoolM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionBool",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DeclaracionBoolM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionBoolM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DeclaracionBoolM ::= ASIGNACION BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionBoolM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DeclaracionString ::= tipoDatoTEXT ID DeclaracionStringM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionString",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DeclaracionStringM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionStringM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DeclaracionStringM ::= ASIGNACION STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionStringM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DeclaracionVariable ::= tipoDatoVARIABLE ID DeclaracionVariableM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DeclaracionVariableM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariableM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DeclaracionVariableM ::= ASIGNACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariableM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declIf ::= preguntaCONDICIONAL parIZQ Expresion parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declIf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declWhile ::= preguntaWHILE parIZQ Expresion parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declWhile",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declFor ::= bucleCONTADOR parIZQ Declaracion puntoCOMA Expresion puntoCOMA Expresion parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ctrlError ::= intentaERROR Bloque manejaERROR Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrlError",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declSwitch ::= seleccionCONDICIONAL parIZQ Expresion parDER llaveIZQ casosSwitch llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSwitch",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // casosSwitch ::= instruccionCase casosSwitchM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosSwitch",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // casosSwitchM ::= instruccionCase casosSwitchM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosSwitchM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // casosSwitchM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosSwitchM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruccionCase ::= casoCONDICIONAL Expresion dosPUNTOS Instruccion rompeCONDICIONAL puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionCase",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declFunc ::= defineFUNCION ID parIZQ Parametros parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunc",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Parametros ::= Parametro COMA Parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Parametro ::= tipoDato ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametro",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipoDato ::= tipoDatoNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipoDato ::= tipoDatoTEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declSync ::= ESPERA defineFUNCION ID parIZQ parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSync",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cicloCADA ::= ID PUNTO PARA parIZQ ID parDER puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloCADA",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declArreglo ::= tipoDato corIZQ corDER ID ASIGNACION corIZQ Elementos corDER puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declArreglo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Elementos ::= Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elementos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Elementos ::= Expresion COMA Elementos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elementos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declEnum ::= tipoDatoENUM ID Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declEnum",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
