
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\005\002" +
    "\000\002\005\004\000\002\006\003\000\002\011\004\000" +
    "\002\011\002\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\005\000\002\012\003\000" +
    "\002\012\004\000\002\014\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\004\000\002\013" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\020\005\000\002" +
    "\021\004\000\002\021\002\000\002\022\006\000\002\037" +
    "\005\000\002\040\004\000\002\040\002\000\002\041\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\015\007\000\002\016\007\000\002\017\013\000\002" +
    "\023\006\000\002\024\011\000\002\025\010\000\002\025" +
    "\002\000\002\026\010\000\002\027\003\000\002\027\005" +
    "\000\002\042\004\000\002\030\007\000\002\031\010\000" +
    "\002\032\011\000\002\033\013\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\005\000\002\036" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\010\002\uffff\033\uffff\101\uffff\001\002\000" +
    "\004\002\243\001\002\000\010\002\ufffc\033\011\101\ufffc" +
    "\001\002\000\010\002\ufffe\033\ufffe\101\ufffe\001\002\000" +
    "\006\002\001\101\020\001\002\000\010\002\ufffd\033\ufffd" +
    "\101\ufffd\001\002\000\004\015\012\001\002\000\004\103" +
    "\013\001\002\000\004\015\014\001\002\000\004\051\015" +
    "\001\002\000\010\002\uffc6\033\uffc6\101\uffc6\001\002\000" +
    "\006\002\ufffb\101\ufffb\001\002\000\006\002\ufffa\101\ufffa" +
    "\001\002\000\004\012\021\001\002\000\004\103\022\001" +
    "\002\000\004\035\023\001\002\000\022\023\026\034\uffd6" +
    "\061\027\064\040\067\042\070\035\075\034\077\032\001" +
    "\002\000\006\002\uffd9\101\uffd9\001\002\000\004\021\230" +
    "\001\002\000\004\103\214\001\002\000\004\103\211\001" +
    "\002\000\022\023\uffd2\034\uffd2\061\uffd2\064\uffd2\067\uffd2" +
    "\070\uffd2\075\uffd2\077\uffd2\001\002\000\004\034\210\001" +
    "\002\000\004\103\206\001\002\000\022\023\uffd4\034\uffd4" +
    "\061\uffd4\064\uffd4\067\uffd4\070\uffd4\075\uffd4\077\uffd4\001" +
    "\002\000\006\021\uffc1\103\131\001\002\000\004\103\204" +
    "\001\002\000\022\023\uffd3\034\uffd3\061\uffd3\064\uffd3\067" +
    "\uffd3\070\uffd3\075\uffd3\077\uffd3\001\002\000\022\023\026" +
    "\034\uffd6\061\027\064\040\067\042\070\035\075\034\077" +
    "\032\001\002\000\004\103\066\001\002\000\004\051\065" +
    "\001\002\000\006\021\uffc2\103\043\001\002\000\006\005" +
    "\044\051\uffda\001\002\000\014\006\052\040\047\045\051" +
    "\057\050\103\046\001\002\000\004\051\uffe0\001\002\000" +
    "\024\004\uffe4\013\uffe4\016\uffe4\020\uffe4\024\uffe4\030\064" +
    "\042\uffe4\044\uffe4\051\uffe4\001\002\000\022\004\uffe2\013" +
    "\uffe2\016\uffe2\020\uffe2\024\uffe2\042\uffe2\044\uffe2\051\uffe2" +
    "\001\002\000\022\004\uffe3\013\uffe3\016\uffe3\020\uffe3\024" +
    "\uffe3\042\uffe3\044\uffe3\051\uffe3\001\002\000\014\006\052" +
    "\040\047\045\051\057\050\103\046\001\002\000\022\004" +
    "\uffe1\013\uffe1\016\uffe1\020\uffe1\024\uffe1\042\uffe1\044\uffe1" +
    "\051\uffe1\001\002\000\012\004\054\016\056\042\055\051" +
    "\uffdb\001\002\000\014\006\052\040\047\045\051\057\050" +
    "\103\046\001\002\000\014\006\052\040\047\045\051\057" +
    "\050\103\046\001\002\000\014\006\052\040\047\045\051" +
    "\057\050\103\046\001\002\000\022\004\054\013\uffe8\016" +
    "\uffe8\020\uffe8\024\uffe8\042\uffe8\044\uffe8\051\uffe8\001\002" +
    "\000\022\004\054\013\uffe9\016\056\020\uffe9\024\uffe9\042" +
    "\uffe9\044\uffe9\051\uffe9\001\002\000\022\004\uffe7\013\uffe7" +
    "\016\uffe7\020\uffe7\024\uffe7\042\uffe7\044\uffe7\051\uffe7\001" +
    "\002\000\012\004\054\016\056\042\055\044\063\001\002" +
    "\000\022\004\uffe5\013\uffe5\016\uffe5\020\uffe5\024\uffe5\042" +
    "\uffe5\044\uffe5\051\uffe5\001\002\000\022\004\uffe6\013\uffe6" +
    "\016\uffe6\020\uffe6\024\uffe6\042\uffe6\044\uffe6\051\uffe6\001" +
    "\002\000\022\023\uffd5\034\uffd5\061\uffd5\064\uffd5\067\uffd5" +
    "\070\uffd5\075\uffd5\077\uffd5\001\002\000\004\035\067\001" +
    "\002\000\052\006\052\007\115\027\105\031\111\034\ufff8" +
    "\035\067\037\100\040\047\045\051\046\114\047\075\054" +
    "\071\057\050\061\027\064\040\067\042\070\035\075\034" +
    "\077\032\103\102\001\002\000\054\006\uffbe\007\uffbe\023" +
    "\uffbe\027\uffbe\031\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\054\uffbe\057\uffbe\061\uffbe\064" +
    "\uffbe\067\uffbe\070\uffbe\075\uffbe\077\uffbe\103\uffbe\001\002" +
    "\000\004\045\167\001\002\000\004\034\166\001\002\000" +
    "\052\006\ufff4\007\ufff4\027\ufff4\031\ufff4\034\ufff4\035\ufff4" +
    "\037\ufff4\040\ufff4\045\ufff4\046\ufff4\047\ufff4\054\ufff4\057" +
    "\ufff4\061\ufff4\064\ufff4\067\ufff4\070\ufff4\075\ufff4\077\ufff4" +
    "\103\ufff4\001\002\000\052\006\ufff2\007\ufff2\027\ufff2\031" +
    "\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\054\ufff2\057\ufff2\061\ufff2\064\ufff2\067\ufff2\070" +
    "\ufff2\075\ufff2\077\ufff2\103\ufff2\001\002\000\004\045\162" +
    "\001\002\000\052\006\ufff1\007\ufff1\027\ufff1\031\ufff1\034" +
    "\ufff1\035\ufff1\037\ufff1\040\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\054\ufff1\057\ufff1\061\ufff1\064\ufff1\067\ufff1\070\ufff1\075" +
    "\ufff1\077\ufff1\103\ufff1\001\002\000\052\006\ufff6\007\ufff6" +
    "\027\ufff6\031\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\054\ufff6\057\ufff6\061\ufff6\064\ufff6" +
    "\067\ufff6\070\ufff6\075\ufff6\077\ufff6\103\ufff6\001\002\000" +
    "\014\006\052\040\047\045\051\057\050\103\046\001\002" +
    "\000\012\004\054\016\056\042\055\051\157\001\002\000" +
    "\016\004\uffe4\016\uffe4\030\064\042\uffe4\050\151\051\uffe4" +
    "\001\002\000\052\006\052\007\115\027\105\031\111\034" +
    "\ufff8\035\067\037\100\040\047\045\051\046\114\047\075" +
    "\054\071\057\050\061\027\064\040\067\042\070\035\075" +
    "\034\077\032\103\102\001\002\000\052\006\ufff0\007\ufff0" +
    "\027\ufff0\031\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\054\ufff0\057\ufff0\061\ufff0\064\ufff0" +
    "\067\ufff0\070\ufff0\075\ufff0\077\ufff0\103\ufff0\001\002\000" +
    "\004\023\143\001\002\000\052\006\ufff3\007\ufff3\027\ufff3" +
    "\031\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\054\ufff3\057\ufff3\061\ufff3\064\ufff3\067\ufff3" +
    "\070\ufff3\075\ufff3\077\ufff3\103\ufff3\001\002\000\004\051" +
    "\142\001\002\000\052\006\ufff5\007\ufff5\027\ufff5\031\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\040\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\054\ufff5\057\ufff5\061\ufff5\064\ufff5\067\ufff5\070\ufff5" +
    "\075\ufff5\077\ufff5\103\ufff5\001\002\000\004\035\067\001" +
    "\002\000\052\006\uffee\007\uffee\027\uffee\031\uffee\034\uffee" +
    "\035\uffee\037\uffee\040\uffee\045\uffee\046\uffee\047\uffee\054" +
    "\uffee\057\uffee\061\uffee\064\uffee\067\uffee\070\uffee\075\uffee" +
    "\077\uffee\103\uffee\001\002\000\052\006\uffec\007\uffec\027" +
    "\uffec\031\uffec\034\uffec\035\uffec\037\uffec\040\uffec\045\uffec" +
    "\046\uffec\047\uffec\054\uffec\057\uffec\061\uffec\064\uffec\067" +
    "\uffec\070\uffec\075\uffec\077\uffec\103\uffec\001\002\000\004" +
    "\045\133\001\002\000\004\045\117\001\002\000\052\006" +
    "\uffef\007\uffef\027\uffef\031\uffef\034\uffef\035\uffef\037\uffef" +
    "\040\uffef\045\uffef\046\uffef\047\uffef\054\uffef\057\uffef\061" +
    "\uffef\064\uffef\067\uffef\070\uffef\075\uffef\077\uffef\103\uffef" +
    "\001\002\000\014\061\027\067\122\070\035\075\120\077" +
    "\032\001\002\000\004\103\131\001\002\000\004\051\123" +
    "\001\002\000\004\103\043\001\002\000\014\006\052\040" +
    "\047\045\051\057\050\103\046\001\002\000\012\004\054" +
    "\016\056\042\055\051\125\001\002\000\014\006\052\040" +
    "\047\045\051\057\050\103\046\001\002\000\012\004\054" +
    "\016\056\042\055\044\127\001\002\000\004\035\067\001" +
    "\002\000\052\006\uffcf\007\uffcf\027\uffcf\031\uffcf\034\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\045\uffcf\046\uffcf\047\uffcf\054" +
    "\uffcf\057\uffcf\061\uffcf\064\uffcf\067\uffcf\070\uffcf\075\uffcf" +
    "\077\uffcf\103\uffcf\001\002\000\006\005\044\051\uffda\001" +
    "\002\000\004\051\uffdd\001\002\000\014\006\052\040\047" +
    "\045\051\057\050\103\046\001\002\000\012\004\054\016" +
    "\056\042\055\044\135\001\002\000\004\035\067\001\002" +
    "\000\052\006\uffd1\007\uffd1\027\uffd1\031\uffd1\034\uffd1\035" +
    "\uffd1\037\uffd1\040\uffd1\045\uffd1\046\uffd1\047\uffd1\054\uffd1" +
    "\057\uffd1\061\uffd1\064\uffd1\067\uffd1\070\uffd1\075\uffd1\077" +
    "\uffd1\103\uffd1\001\002\000\004\036\140\001\002\000\004" +
    "\035\067\001\002\000\052\006\uffce\007\uffce\027\uffce\031" +
    "\uffce\034\uffce\035\uffce\037\uffce\040\uffce\045\uffce\046\uffce" +
    "\047\uffce\054\uffce\057\uffce\061\uffce\064\uffce\067\uffce\070" +
    "\uffce\075\uffce\077\uffce\103\uffce\001\002\000\052\006\ufff7" +
    "\007\ufff7\027\ufff7\031\ufff7\034\ufff7\035\ufff7\037\ufff7\040" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\061\ufff7" +
    "\064\ufff7\067\ufff7\070\ufff7\075\ufff7\077\ufff7\103\ufff7\001" +
    "\002\000\004\103\144\001\002\000\004\045\145\001\002" +
    "\000\004\044\146\001\002\000\004\035\067\001\002\000" +
    "\052\006\uffc5\007\uffc5\027\uffc5\031\uffc5\034\uffc5\035\uffc5" +
    "\037\uffc5\040\uffc5\045\uffc5\046\uffc5\047\uffc5\054\uffc5\057" +
    "\uffc5\061\uffc5\064\uffc5\067\uffc5\070\uffc5\075\uffc5\077\uffc5" +
    "\103\uffc5\001\002\000\004\034\ufff9\001\002\000\004\043" +
    "\152\001\002\000\004\045\153\001\002\000\004\103\154" +
    "\001\002\000\004\044\155\001\002\000\004\051\156\001" +
    "\002\000\052\006\uffc4\007\uffc4\027\uffc4\031\uffc4\034\uffc4" +
    "\035\uffc4\037\uffc4\040\uffc4\045\uffc4\046\uffc4\047\uffc4\054" +
    "\uffc4\057\uffc4\061\uffc4\064\uffc4\067\uffc4\070\uffc4\075\uffc4" +
    "\077\uffc4\103\uffc4\001\002\000\052\006\uffeb\007\uffeb\027" +
    "\uffeb\031\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\054\uffeb\057\uffeb\061\uffeb\064\uffeb\067" +
    "\uffeb\070\uffeb\075\uffeb\077\uffeb\103\uffeb\001\002\000\012" +
    "\004\054\016\056\042\055\051\161\001\002\000\052\006" +
    "\uffed\007\uffed\027\uffed\031\uffed\034\uffed\035\uffed\037\uffed" +
    "\040\uffed\045\uffed\046\uffed\047\uffed\054\uffed\057\uffed\061" +
    "\uffed\064\uffed\067\uffed\070\uffed\075\uffed\077\uffed\103\uffed" +
    "\001\002\000\014\006\052\040\047\045\051\057\050\103" +
    "\046\001\002\000\012\004\054\016\056\042\055\044\164" +
    "\001\002\000\004\035\067\001\002\000\052\006\uffd0\007" +
    "\uffd0\027\uffd0\031\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\054\uffd0\057\uffd0\061\uffd0\064" +
    "\uffd0\067\uffd0\070\uffd0\075\uffd0\077\uffd0\103\uffd0\001\002" +
    "\000\056\006\uffea\007\uffea\023\uffea\027\uffea\031\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\045\uffea\046\uffea" +
    "\047\uffea\054\uffea\057\uffea\061\uffea\064\uffea\067\uffea\070" +
    "\uffea\075\uffea\077\uffea\103\uffea\001\002\000\014\006\052" +
    "\040\047\045\051\057\050\103\046\001\002\000\012\004" +
    "\054\016\056\042\055\044\171\001\002\000\004\035\172" +
    "\001\002\000\006\010\173\034\uffcb\001\002\000\014\006" +
    "\052\040\047\045\051\057\050\103\046\001\002\000\004" +
    "\034\175\001\002\000\052\006\uffcd\007\uffcd\027\uffcd\031" +
    "\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\054\uffcd\057\uffcd\061\uffcd\064\uffcd\067\uffcd\070" +
    "\uffcd\075\uffcd\077\uffcd\103\uffcd\001\002\000\012\004\054" +
    "\016\056\024\177\042\055\001\002\000\004\053\200\001" +
    "\002\000\004\051\201\001\002\000\006\010\173\034\uffcb" +
    "\001\002\000\004\034\uffcc\001\002\000\004\034\uffd7\001" +
    "\002\000\006\005\044\051\uffda\001\002\000\004\051\uffdf" +
    "\001\002\000\006\005\044\051\uffda\001\002\000\004\051" +
    "\uffdc\001\002\000\006\002\uffd8\101\uffd8\001\002\000\004" +
    "\005\212\001\002\000\004\006\213\001\002\000\004\051" +
    "\uffde\001\002\000\004\045\215\001\002\000\006\067\222" +
    "\075\220\001\002\000\006\013\226\044\uffc9\001\002\000" +
    "\004\103\225\001\002\000\004\103\uffc1\001\002\000\004" +
    "\044\223\001\002\000\004\103\uffc2\001\002\000\004\035" +
    "\067\001\002\000\022\023\uffca\034\uffca\061\uffca\064\uffca" +
    "\067\uffca\070\uffca\075\uffca\077\uffca\001\002\000\006\013" +
    "\uffc7\044\uffc7\001\002\000\006\067\222\075\220\001\002" +
    "\000\004\044\uffc8\001\002\000\004\020\231\001\002\000" +
    "\004\103\232\001\002\000\004\005\233\001\002\000\004" +
    "\021\234\001\002\000\014\006\052\040\047\045\051\057" +
    "\050\103\046\001\002\000\004\020\241\001\002\000\014" +
    "\004\054\013\237\016\056\020\uffc0\042\055\001\002\000" +
    "\014\006\052\040\047\045\051\057\050\103\046\001\002" +
    "\000\004\020\uffbf\001\002\000\004\051\242\001\002\000" +
    "\054\006\uffc3\007\uffc3\023\uffc3\027\uffc3\031\uffc3\034\uffc3" +
    "\035\uffc3\037\uffc3\040\uffc3\045\uffc3\046\uffc3\047\uffc3\054" +
    "\uffc3\057\uffc3\061\uffc3\064\uffc3\067\uffc3\070\uffc3\075\uffc3" +
    "\077\uffc3\103\uffc3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\005\005\006\030\007\001\001\000\002" +
    "\001\001\000\006\006\015\022\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\023\001\001\000\020\020\040\026\032\033\035\034" +
    "\024\036\027\040\030\041\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\040\026\032\033\035\034\024\036\027" +
    "\040\202\041\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\044\001\001\000\004" +
    "\013\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\060\001" +
    "\001\000\004\013\057\001\001\000\004\013\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\067\001\001\000\040\011\071\012" +
    "\102\013\100\014\112\015\107\016\072\017\105\020\106" +
    "\023\115\024\111\031\076\032\103\033\073\034\024\036" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\011" +
    "\147\012\102\013\100\014\112\015\107\016\072\017\105" +
    "\020\106\023\115\024\111\031\076\032\103\033\073\034" +
    "\024\036\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\123\001\001\000\002\001" +
    "\001\000\004\013\125\001\001\000\002\001\001\000\004" +
    "\014\127\001\001\000\002\001\001\000\004\021\131\001" +
    "\001\000\002\001\001\000\004\013\133\001\001\000\002" +
    "\001\001\000\004\014\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\162\001\001\000\002\001\001\000\004" +
    "\014\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\173\001\001\000\004\013\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\204\001\001" +
    "\000\002\001\001\000\004\021\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\220\034" +
    "\216\042\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\226\034\216\042\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\235\035\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\235\035\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            int line = s.left;
            String token = (s.value == null) ? " " : s.value.toString();
            System.err.println("ERROR sintáctico en línea " + line + ": Token inesperado '" + token + "'");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Importaciones Clases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Importaciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importaciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Importaciones ::= Importaciones Importacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importaciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Importacion ::= imp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Clases ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Clases",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Clases ::= Clases Clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Clases",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Clase ::= declClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CuerpoInstrucciones ::= Instruccion CuerpoInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoInstrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CuerpoInstrucciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoInstrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruccion ::= Declaracion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruccion ::= declSync 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruccion ::= declIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruccion ::= declWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruccion ::= declFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruccion ::= declArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruccion ::= declEnum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruccion ::= cicloCADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruccion ::= ctrlError 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruccion ::= declSwitch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruccion ::= muestraTEXTO Expresion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruccion ::= Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruccion ::= Expresion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bloque ::= llaveIZQ CuerpoInstrucciones llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= Expresion operLOGICOS Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= Expresion COMPARACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= Expresion ARITMETICOS Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= ID INCREDECRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= parIZQ Expresion parDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declaracion ::= tipoDatoNUM ID asignaValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declaracion ::= tipoDatoNumDecimal ID asignaValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declaracion ::= tipoDatoBool ID ASIGNACION BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Declaracion ::= tipoDatoTEXT ID asignaValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Declaracion ::= tipoDatoVARIABLE ID asignaValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignaValor ::= ASIGNACION Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaValor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignaValor ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaValor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declClase ::= VISIBILIDAD CLASS ID BloqueClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declClase",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BloqueClase ::= llaveIZQ MiembrosClase llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BloqueClase",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MiembrosClase ::= Miembro MiembrosClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MiembrosClase",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MiembrosClase ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MiembrosClase",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Miembro ::= Declaracion puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Miembro ::= declFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Miembro ::= declArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Miembro ::= declEnum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Miembro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declIf ::= preguntaCONDICIONAL parIZQ Expresion parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declIf",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declWhile ::= preguntaWHILE parIZQ Expresion parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declWhile",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declFor ::= bucleCONTADOR parIZQ Declaracion puntoCOMA Expresion puntoCOMA Expresion parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ctrlError ::= intentaERROR Bloque manejaERROR Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrlError",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declSwitch ::= seleccionCONDICIONAL parIZQ Expresion parDER llaveIZQ casosSwitch llaveDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSwitch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // casosSwitch ::= casoCONDICIONAL Expresion dosPUNTOS rompeCONDICIONAL puntoCOMA casosSwitch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosSwitch",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // casosSwitch ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosSwitch",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declFunc ::= defineFUNCION ID parIZQ Parametros parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Parametros ::= Parametro COMA Parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parametro ::= tipoDato ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // imp ::= IMPORTACION COMILLA ID COMILLA puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("imp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declSync ::= ESPERA defineFUNCION ID parIZQ parDER Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSync",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cicloCADA ::= ID PUNTO PARA parIZQ ID parDER puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloCADA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declArreglo ::= tipoDato corIZQ corDER ID ASIGNACION corIZQ Elementos corDER puntoCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipoDato ::= tipoDatoNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipoDato ::= tipoDatoTEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Elementos ::= Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elementos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Elementos ::= Expresion COMA Elementos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elementos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declEnum ::= tipoDatoENUM ID Bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declEnum",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
