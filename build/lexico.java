// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexico.flex

import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\27\1\22\1\30\1\22"+
    "\1\31\1\32\1\33\1\34\1\35\2\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\47\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\0\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\47"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\47\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\7\0\1\3\56\0\1\127\u0173\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\4\1\10\1\4\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\23\17\1\20\1\21"+
    "\1\4\22\17\1\22\1\3\1\23\1\24\1\15\1\0"+
    "\1\25\1\0\1\26\1\27\1\0\1\30\7\0\31\17"+
    "\1\31\1\26\1\17\1\31\15\17\1\32\15\17\1\3"+
    "\47\17\1\0\4\17\1\0\4\17\1\0\1\17\3\0"+
    "\31\17\1\33\14\17\1\34\5\17\2\35\1\36\21\17"+
    "\1\37\2\17\1\40\5\17\1\40\6\17\1\41\5\17"+
    "\1\42\2\36\2\17\1\34\3\17\1\35\1\43\2\17"+
    "\1\44\1\0\7\17\1\45\1\17\1\46\1\17\1\45"+
    "\1\17\1\47\1\17\1\50\4\17\1\50\11\17\1\51"+
    "\1\52\11\17\1\35\2\17\1\53\1\54\23\17\1\55"+
    "\6\17\1\55\1\40\1\17\1\56\14\17\1\57\1\44"+
    "\1\55\1\17\1\60\1\17\1\61\1\17\1\62\11\17"+
    "\1\42\1\63\1\42\7\17\1\64\3\17\1\64\3\17"+
    "\1\65\1\17\1\66\12\17\1\67\2\17\1\70\14\17"+
    "\1\71\4\17\1\72\3\17\1\73\1\64\2\17\1\43"+
    "\2\17\1\74\1\75\1\76\1\77\7\17\1\45\12\17"+
    "\1\100\1\101\2\17\1\102\10\17\1\50\1\103\1\104"+
    "\6\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\130\0\260\0\u0108\0\u0160\0\130\0\u01b8\0\130"+
    "\0\u0210\0\130\0\u0268\0\130\0\u02c0\0\130\0\u0318\0\u0370"+
    "\0\u03c8\0\u0420\0\u0478\0\u0108\0\u04d0\0\u0528\0\u0580\0\u05d8"+
    "\0\u0630\0\u0688\0\u06e0\0\u0738\0\u0790\0\u07e8\0\u0840\0\u0898"+
    "\0\u08f0\0\u0948\0\u09a0\0\u09f8\0\u0a50\0\u0aa8\0\u0b00\0\u0b58"+
    "\0\u0bb0\0\130\0\u0c08\0\u0c60\0\u0cb8\0\u0d10\0\u0d68\0\u0dc0"+
    "\0\u0e18\0\u0e70\0\u0ec8\0\u0f20\0\u0f78\0\u0fd0\0\u1028\0\u1080"+
    "\0\u10d8\0\u1130\0\u1188\0\u11e0\0\u1238\0\130\0\130\0\130"+
    "\0\260\0\130\0\u0160\0\130\0\u1290\0\130\0\130\0\u12e8"+
    "\0\u1340\0\u1398\0\u13f0\0\u1448\0\u14a0\0\u14f8\0\u1550\0\u15a8"+
    "\0\u1600\0\u1658\0\u16b0\0\u1708\0\u1760\0\u17b8\0\u1810\0\u1868"+
    "\0\u18c0\0\u1918\0\u1970\0\u19c8\0\u1a20\0\u1a78\0\u1ad0\0\u1b28"+
    "\0\u1b80\0\u1bd8\0\u1c30\0\u1c88\0\u1ce0\0\u1d38\0\u1d90\0\u1de8"+
    "\0\u1e40\0\u1e98\0\u0738\0\u1ef0\0\u1f48\0\u1fa0\0\u1ff8\0\u2050"+
    "\0\u20a8\0\u2100\0\u2158\0\u21b0\0\u2208\0\u2260\0\u22b8\0\u2310"+
    "\0\u2368\0\u23c0\0\u0738\0\u2418\0\u2470\0\u24c8\0\u2520\0\u2578"+
    "\0\u25d0\0\u2628\0\u2680\0\u26d8\0\u2730\0\u2788\0\u27e0\0\u2838"+
    "\0\u0738\0\u2890\0\u28e8\0\u2940\0\u2998\0\u29f0\0\u2a48\0\u2aa0"+
    "\0\u2af8\0\u2b50\0\u2ba8\0\u2c00\0\u2c58\0\u2cb0\0\u2d08\0\u2d60"+
    "\0\u2db8\0\u2e10\0\u2e68\0\u2ec0\0\u2f18\0\u2f70\0\u2fc8\0\u3020"+
    "\0\u3078\0\u30d0\0\u3128\0\u3180\0\u31d8\0\u3230\0\u3288\0\u32e0"+
    "\0\u3338\0\u3390\0\u33e8\0\u3440\0\u3498\0\u34f0\0\u3548\0\u35a0"+
    "\0\u35f8\0\u3650\0\u36a8\0\u3700\0\u3758\0\u37b0\0\u3808\0\u3860"+
    "\0\u38b8\0\u3910\0\u3968\0\u39c0\0\u3a18\0\u3a70\0\u3ac8\0\u3b20"+
    "\0\u3b78\0\u3bd0\0\u3c28\0\u3c80\0\u3cd8\0\u3d30\0\u3d88\0\u3de0"+
    "\0\u3e38\0\u3e90\0\u3ee8\0\u3f40\0\u3f98\0\u3ff0\0\u4048\0\u40a0"+
    "\0\u40f8\0\u4150\0\u41a8\0\u4200\0\u4258\0\u42b0\0\u4308\0\u4360"+
    "\0\u0738\0\u43b8\0\u4410\0\u4468\0\u44c0\0\u4518\0\u4570\0\u45c8"+
    "\0\u4620\0\u4678\0\u46d0\0\u4728\0\u4780\0\u0738\0\u47d8\0\u4830"+
    "\0\u4888\0\u48e0\0\u4938\0\u4990\0\u49e8\0\u0738\0\u4a40\0\u4a98"+
    "\0\u4af0\0\u4b48\0\u4ba0\0\u4bf8\0\u4c50\0\u4ca8\0\u4d00\0\u4d58"+
    "\0\u4db0\0\u4e08\0\u4e60\0\u4eb8\0\u4f10\0\u4f68\0\u4fc0\0\u0738"+
    "\0\u5018\0\u5070\0\u50c8\0\u5120\0\u5178\0\u51d0\0\u5228\0\u5280"+
    "\0\u52d8\0\u5330\0\u5388\0\u53e0\0\u5438\0\u5490\0\u54e8\0\u0738"+
    "\0\u5540\0\u5598\0\u55f0\0\u5648\0\u56a0\0\u0738\0\u56f8\0\u5750"+
    "\0\u57a8\0\u5800\0\u5858\0\u58b0\0\u5908\0\u5960\0\u59b8\0\u4eb8"+
    "\0\u5a10\0\u5a68\0\130\0\u5ac0\0\u5b18\0\u5b70\0\u5bc8\0\u5c20"+
    "\0\u5c78\0\u5cd0\0\u5d28\0\u5d80\0\u5dd8\0\u0738\0\u5e30\0\u5e88"+
    "\0\u5ee0\0\u0738\0\u5f38\0\u5f90\0\u5fe8\0\u6040\0\u6098\0\u60f0"+
    "\0\u6148\0\u61a0\0\u61f8\0\u6250\0\u62a8\0\u6300\0\u6358\0\u63b0"+
    "\0\u6408\0\u6460\0\u0738\0\u0738\0\u64b8\0\u6510\0\u6568\0\u65c0"+
    "\0\u6618\0\u6670\0\u66c8\0\u6720\0\u6778\0\u0738\0\u67d0\0\u6828"+
    "\0\u0738\0\u0738\0\u6880\0\u68d8\0\u6930\0\u6988\0\u69e0\0\u6a38"+
    "\0\u6a90\0\u6ae8\0\u6b40\0\u6b98\0\u6bf0\0\u6c48\0\u6ca0\0\u6cf8"+
    "\0\u6d50\0\u6da8\0\u6e00\0\u6e58\0\u6eb0\0\u6f08\0\u6f60\0\u6fb8"+
    "\0\u7010\0\u7068\0\u70c0\0\u7118\0\u7170\0\u0738\0\u71c8\0\u0738"+
    "\0\u7220\0\u7278\0\u72d0\0\u7328\0\u7380\0\u73d8\0\u7430\0\u7488"+
    "\0\u74e0\0\u7538\0\u7590\0\u75e8\0\u0738\0\u12e8\0\u0738\0\u7640"+
    "\0\u0738\0\u7698\0\u0738\0\u76f0\0\u0738\0\u7748\0\u77a0\0\u77f8"+
    "\0\u7850\0\u78a8\0\u7900\0\u7958\0\u79b0\0\u7a08\0\u7a60\0\u0738"+
    "\0\u7ab8\0\u7b10\0\u7b68\0\u7bc0\0\u7c18\0\u7c70\0\u7cc8\0\u7d20"+
    "\0\u7d78\0\u7dd0\0\u7e28\0\u7e80\0\u7ed8\0\u7f30\0\u7f88\0\u7fe0"+
    "\0\u0738\0\u8038\0\u0738\0\u8090\0\u80e8\0\u8140\0\u8198\0\u81f0"+
    "\0\u8248\0\u82a0\0\u82f8\0\u8350\0\u83a8\0\u0738\0\u8400\0\u8458"+
    "\0\u0738\0\u84b0\0\u8508\0\u8560\0\u85b8\0\u8610\0\u8668\0\u86c0"+
    "\0\u8718\0\u8770\0\u87c8\0\u8820\0\u8878\0\u0738\0\u88d0\0\u8928"+
    "\0\u8980\0\u89d8\0\u0738\0\u8a30\0\u8a88\0\u8ae0\0\u0738\0\u0738"+
    "\0\u8b38\0\u8b90\0\u0738\0\u8be8\0\u8c40\0\u0738\0\u0738\0\u0738"+
    "\0\u0738\0\u8c98\0\u8cf0\0\u8d48\0\u8da0\0\u8df8\0\u8e50\0\u8ea8"+
    "\0\u0738\0\u8f00\0\u8f58\0\u8fb0\0\u9008\0\u9060\0\u90b8\0\u9110"+
    "\0\u9168\0\u91c0\0\u9218\0\u0738\0\u0738\0\u9270\0\u92c8\0\u0738"+
    "\0\u9320\0\u9378\0\u93d0\0\u9428\0\u9480\0\u94d8\0\u9530\0\u9588"+
    "\0\u0738\0\u0738\0\u0738\0\u95e0\0\u9638\0\u9690\0\u96e8\0\u9740"+
    "\0\u9798";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\6\1\13\1\14\1\15\1\16"+
    "\1\17\7\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\1\35\2\34"+
    "\1\36\1\34\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\34\1\51\1\2\1\52"+
    "\1\53\1\2\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\34\1\62\1\34\1\63\1\34\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\2\34"+
    "\1\76\1\77\1\100\1\2\131\0\2\101\161\0\1\102"+
    "\73\0\5\103\1\104\62\103\1\105\37\103\10\0\1\77"+
    "\153\0\1\106\110\0\1\107\131\0\1\107\124\0\1\110"+
    "\4\0\1\111\130\0\7\20\105\0\1\106\4\0\1\106"+
    "\3\0\1\112\1\0\1\106\17\0\1\106\15\0\1\106"+
    "\11\0\1\106\1\113\26\0\1\106\3\0\1\106\1\0"+
    "\1\114\13\0\1\106\3\0\1\115\5\0\1\106\13\0"+
    "\1\106\107\0\1\116\3\0\1\106\6\0\1\102\36\0"+
    "\1\117\54\0\1\117\10\0\1\114\2\0\1\102\36\0"+
    "\1\120\56\0\7\34\5\0\15\34\1\121\2\34\1\122"+
    "\1\123\3\34\1\124\3\34\5\0\14\34\1\125\2\34"+
    "\1\126\1\127\3\34\1\130\3\34\26\0\7\34\5\0"+
    "\10\34\1\131\5\34\1\132\1\34\1\133\6\34\1\134"+
    "\1\34\5\0\10\34\1\135\4\34\1\136\1\34\1\137"+
    "\6\34\1\140\1\34\26\0\7\34\5\0\1\141\6\34"+
    "\1\142\3\34\1\143\2\34\1\144\12\34\5\0\1\145"+
    "\6\34\1\146\2\34\1\147\2\34\1\150\12\34\26\0"+
    "\7\34\1\106\4\0\4\34\1\151\11\34\1\152\7\34"+
    "\1\153\2\34\5\0\4\34\1\154\10\34\1\155\12\34"+
    "\26\0\7\34\5\0\13\34\1\156\1\34\1\157\13\34"+
    "\5\0\12\34\1\160\1\34\1\161\13\34\26\0\7\34"+
    "\5\0\1\162\7\34\1\163\2\34\1\164\2\34\1\165"+
    "\12\34\5\0\1\166\7\34\1\167\1\34\1\170\2\34"+
    "\1\171\1\34\1\172\10\34\26\0\7\34\5\0\31\34"+
    "\5\0\30\34\26\0\7\34\5\0\5\34\1\173\6\34"+
    "\1\174\1\175\13\34\5\0\5\34\1\173\6\34\1\176"+
    "\13\34\26\0\7\34\5\0\4\34\1\177\3\34\1\200"+
    "\5\34\1\201\12\34\5\0\4\34\1\202\3\34\1\203"+
    "\4\34\1\204\12\34\26\0\7\34\5\0\16\34\1\205"+
    "\4\34\1\206\5\34\5\0\15\34\1\207\4\34\1\210"+
    "\5\34\26\0\7\34\5\0\20\34\1\211\10\34\5\0"+
    "\17\34\1\211\10\34\26\0\7\34\5\0\20\34\1\212"+
    "\2\34\1\213\5\34\5\0\17\34\1\214\2\34\1\215"+
    "\5\34\26\0\7\34\5\0\1\216\3\34\1\217\24\34"+
    "\5\0\1\220\27\34\26\0\7\34\5\0\4\34\1\221"+
    "\2\34\1\222\3\34\1\223\6\34\1\224\2\34\1\225"+
    "\1\34\1\226\1\34\5\0\4\34\1\227\2\34\1\230"+
    "\2\34\1\231\6\34\1\232\2\34\1\233\1\34\1\234"+
    "\1\34\26\0\7\34\5\0\4\34\1\235\2\34\1\236"+
    "\10\34\1\237\2\34\1\240\5\34\5\0\4\34\1\241"+
    "\2\34\1\242\7\34\1\243\2\34\1\244\1\34\1\245"+
    "\3\34\26\0\7\34\5\0\13\34\1\246\5\34\1\247"+
    "\7\34\5\0\12\34\1\250\5\34\1\251\3\34\1\252"+
    "\3\34\26\0\7\34\5\0\1\253\30\34\5\0\1\254"+
    "\27\34\26\0\7\34\5\0\7\34\1\255\21\34\5\0"+
    "\7\34\1\256\20\34\26\0\7\34\5\0\3\34\1\153"+
    "\12\34\1\257\12\34\5\0\15\34\1\260\12\34\35\0"+
    "\1\106\205\0\1\261\42\0\7\34\5\0\31\34\5\0"+
    "\14\34\1\125\2\34\1\126\1\127\3\34\1\130\3\34"+
    "\26\0\7\34\5\0\31\34\5\0\10\34\1\135\4\34"+
    "\1\136\1\34\1\137\6\34\1\140\1\34\26\0\7\34"+
    "\5\0\31\34\5\0\1\145\6\34\1\146\2\34\1\147"+
    "\2\34\1\150\12\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\154\10\34\1\155\12\34\26\0\7\34\5\0"+
    "\31\34\5\0\12\34\1\160\1\34\1\161\13\34\26\0"+
    "\7\34\5\0\31\34\5\0\1\166\7\34\1\167\1\34"+
    "\1\170\2\34\1\262\1\34\1\172\2\34\1\263\5\34"+
    "\26\0\7\34\5\0\31\34\5\0\5\34\1\173\5\34"+
    "\1\264\1\265\13\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\202\3\34\1\203\4\34\1\204\12\34\26\0"+
    "\7\34\5\0\31\34\5\0\15\34\1\207\4\34\1\210"+
    "\5\34\26\0\7\34\5\0\31\34\4\0\1\266\17\34"+
    "\1\211\10\34\26\0\7\34\5\0\31\34\5\0\17\34"+
    "\1\214\2\34\1\267\5\34\26\0\7\34\5\0\31\34"+
    "\5\0\1\220\3\34\1\270\23\34\26\0\7\34\5\0"+
    "\31\34\5\0\4\34\1\227\2\34\1\230\2\34\1\231"+
    "\6\34\1\232\2\34\1\233\1\34\1\271\1\34\26\0"+
    "\7\34\5\0\31\34\5\0\4\34\1\241\2\34\1\242"+
    "\7\34\1\243\2\34\1\272\5\34\26\0\7\34\5\0"+
    "\31\34\5\0\12\34\1\250\5\34\1\251\7\34\24\0"+
    "\1\273\1\0\7\34\5\0\31\34\5\0\1\254\14\34"+
    "\1\274\12\34\26\0\7\34\5\0\31\34\5\0\7\34"+
    "\1\256\20\34\26\0\7\34\5\0\31\34\4\0\1\275"+
    "\15\34\1\260\12\34\4\0\2\103\2\0\124\103\14\110"+
    "\1\276\53\110\1\277\37\110\2\111\2\0\124\111\12\0"+
    "\2\106\21\0\1\106\33\0\1\106\17\0\1\106\14\0"+
    "\1\106\14\0\1\106\126\0\1\106\147\0\1\106\122\0"+
    "\1\106\135\0\1\106\127\0\1\106\1\0\1\106\114\0"+
    "\7\34\5\0\3\34\1\211\25\34\5\0\30\34\26\0"+
    "\7\34\5\0\20\34\1\300\10\34\5\0\30\34\26\0"+
    "\7\34\5\0\27\34\1\301\1\34\5\0\30\34\26\0"+
    "\7\34\5\0\1\302\30\34\5\0\30\34\26\0\7\34"+
    "\5\0\31\34\5\0\3\34\1\211\24\34\26\0\7\34"+
    "\5\0\31\34\5\0\17\34\1\303\10\34\26\0\7\34"+
    "\5\0\31\34\5\0\26\34\1\304\1\34\26\0\7\34"+
    "\5\0\31\34\5\0\1\305\27\34\26\0\7\34\5\0"+
    "\6\34\1\306\22\34\5\0\30\34\26\0\7\34\5\0"+
    "\16\34\1\307\12\34\5\0\30\34\26\0\7\34\5\0"+
    "\4\34\1\310\24\34\5\0\30\34\26\0\7\34\5\0"+
    "\22\34\1\311\6\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\6\34\1\312\21\34\26\0\7\34\5\0"+
    "\31\34\5\0\15\34\1\313\12\34\26\0\7\34\5\0"+
    "\31\34\5\0\4\34\1\314\23\34\26\0\7\34\5\0"+
    "\31\34\5\0\21\34\1\315\6\34\26\0\7\34\5\0"+
    "\21\34\1\316\1\317\6\34\5\0\30\34\26\0\7\34"+
    "\5\0\1\320\30\34\5\0\30\34\26\0\7\34\5\0"+
    "\1\321\30\34\5\0\30\34\26\0\7\34\5\0\15\34"+
    "\1\322\13\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\20\34\1\323\1\324\6\34\26\0\7\34\5\0"+
    "\31\34\5\0\1\325\27\34\26\0\7\34\5\0\31\34"+
    "\5\0\1\326\27\34\26\0\7\34\5\0\31\34\5\0"+
    "\14\34\1\327\13\34\26\0\7\34\5\0\2\34\1\330"+
    "\2\34\1\331\5\34\1\332\15\34\5\0\30\34\26\0"+
    "\7\34\5\0\23\34\1\333\5\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\2\34\1\334\2\34\1\331"+
    "\4\34\1\335\15\34\26\0\7\34\5\0\31\34\5\0"+
    "\22\34\1\336\5\34\26\0\7\34\5\0\21\34\1\337"+
    "\7\34\5\0\30\34\26\0\7\34\5\0\23\34\1\340"+
    "\5\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\20\34\1\341\7\34\26\0\7\34\5\0\31\34\5\0"+
    "\22\34\1\342\5\34\26\0\7\34\5\0\13\34\1\343"+
    "\15\34\5\0\30\34\26\0\7\34\5\0\15\34\1\344"+
    "\13\34\5\0\30\34\26\0\7\34\5\0\16\34\1\345"+
    "\12\34\5\0\30\34\26\0\7\34\5\0\20\34\1\346"+
    "\10\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\12\34\1\347\15\34\26\0\7\34\5\0\31\34\5\0"+
    "\14\34\1\350\13\34\26\0\7\34\5\0\31\34\5\0"+
    "\15\34\1\351\12\34\26\0\7\34\5\0\31\34\5\0"+
    "\17\34\1\346\10\34\26\0\7\34\5\0\31\34\5\0"+
    "\15\34\1\352\12\34\26\0\7\34\5\0\17\34\1\353"+
    "\11\34\5\0\30\34\26\0\7\34\5\0\22\34\1\354"+
    "\6\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\21\34\1\355\6\34\26\0\7\34\5\0\22\34\1\356"+
    "\6\34\5\0\30\34\26\0\7\34\5\0\21\34\1\357"+
    "\7\34\5\0\30\34\26\0\7\34\5\0\15\34\1\360"+
    "\13\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\21\34\1\356\6\34\26\0\7\34\5\0\31\34\5\0"+
    "\20\34\1\361\7\34\26\0\7\34\5\0\31\34\5\0"+
    "\14\34\1\362\13\34\26\0\7\34\5\0\22\34\1\211"+
    "\6\34\5\0\30\34\26\0\7\34\5\0\13\34\1\363"+
    "\1\364\14\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\21\34\1\211\6\34\26\0\7\34\5\0\31\34"+
    "\5\0\12\34\1\365\1\366\14\34\26\0\7\34\5\0"+
    "\10\34\1\367\5\34\1\370\12\34\5\0\30\34\26\0"+
    "\7\34\5\0\1\34\1\371\27\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\10\34\1\372\4\34\1\373"+
    "\12\34\26\0\7\34\5\0\31\34\5\0\1\34\1\374"+
    "\26\34\26\0\7\34\5\0\10\34\1\375\20\34\5\0"+
    "\30\34\26\0\7\34\5\0\22\34\1\376\6\34\5\0"+
    "\30\34\26\0\7\34\5\0\31\34\5\0\10\34\1\377"+
    "\17\34\26\0\7\34\5\0\22\34\1\u0100\6\34\5\0"+
    "\30\34\26\0\7\34\5\0\16\34\1\u0101\12\34\5\0"+
    "\30\34\26\0\7\34\5\0\10\34\1\u0102\20\34\5\0"+
    "\30\34\26\0\7\34\5\0\20\34\1\u0103\10\34\5\0"+
    "\30\34\26\0\7\34\5\0\10\34\1\u0104\20\34\5\0"+
    "\30\34\26\0\7\34\5\0\14\34\1\u0105\1\u0106\13\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\21\34"+
    "\1\u0100\6\34\26\0\7\34\5\0\31\34\5\0\15\34"+
    "\1\u0107\12\34\26\0\7\34\5\0\31\34\5\0\10\34"+
    "\1\u0108\17\34\26\0\7\34\5\0\31\34\5\0\17\34"+
    "\1\u0109\10\34\26\0\7\34\5\0\31\34\5\0\10\34"+
    "\1\u010a\17\34\26\0\7\34\5\0\31\34\5\0\13\34"+
    "\1\u010b\1\u010c\13\34\26\0\7\34\5\0\26\34\1\u010d"+
    "\2\34\5\0\30\34\26\0\7\34\5\0\20\34\1\u010e"+
    "\10\34\5\0\30\34\26\0\7\34\5\0\23\34\1\u010f"+
    "\3\34\1\u0110\1\34\5\0\30\34\26\0\7\34\5\0"+
    "\17\34\1\u0111\11\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\25\34\1\u0112\2\34\26\0\7\34\5\0"+
    "\31\34\5\0\17\34\1\u0113\10\34\26\0\7\34\5\0"+
    "\31\34\5\0\22\34\1\u0114\3\34\1\u0110\1\34\26\0"+
    "\7\34\5\0\22\34\1\153\6\34\5\0\16\34\1\u0115"+
    "\11\34\26\0\7\34\5\0\22\34\1\153\6\34\5\0"+
    "\30\34\26\0\7\34\5\0\16\34\1\201\12\34\5\0"+
    "\30\34\26\0\7\34\5\0\7\34\1\222\21\34\5\0"+
    "\30\34\26\0\7\34\5\0\31\34\5\0\15\34\1\204"+
    "\12\34\26\0\7\34\5\0\31\34\5\0\7\34\1\230"+
    "\20\34\26\0\7\34\5\0\23\34\1\153\5\34\5\0"+
    "\30\34\26\0\7\34\5\0\13\34\1\u0116\4\34\1\u0117"+
    "\10\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\12\34\1\u0116\4\34\1\u0118\10\34\26\0\7\34\5\0"+
    "\10\34\1\u0119\20\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\10\34\1\u011a\17\34\26\0\7\34\5\0"+
    "\20\34\1\211\10\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\17\34\1\211\10\34\76\0\1\106\57\0"+
    "\7\34\5\0\31\34\5\0\17\34\1\u011b\10\34\26\0"+
    "\7\34\5\0\31\34\5\0\14\34\1\u011c\13\34\26\0"+
    "\7\34\5\0\31\34\5\0\16\34\1\u011d\11\34\26\0"+
    "\7\34\5\0\31\34\5\0\2\34\1\u011e\16\34\1\u011f"+
    "\6\34\115\0\1\106\40\0\7\34\5\0\31\34\5\0"+
    "\1\34\1\u0120\26\34\26\0\7\34\5\0\31\34\5\0"+
    "\21\34\1\u0121\6\34\26\0\7\34\5\0\31\34\5\0"+
    "\14\34\1\u010c\13\34\26\0\7\34\5\0\31\34\5\0"+
    "\16\34\1\u0115\11\34\123\0\1\106\32\0\7\34\5\0"+
    "\31\34\5\0\10\34\1\u0122\17\34\125\0\1\106\6\0"+
    "\21\110\1\u0123\122\110\1\u0124\53\110\1\277\37\110\22\0"+
    "\7\34\5\0\1\u0125\30\34\5\0\30\34\26\0\7\34"+
    "\5\0\15\34\1\u0126\13\34\5\0\30\34\26\0\7\34"+
    "\5\0\10\34\1\u0127\20\34\5\0\30\34\26\0\7\34"+
    "\5\0\31\34\5\0\1\u0128\27\34\26\0\7\34\5\0"+
    "\31\34\5\0\14\34\1\u0129\13\34\26\0\7\34\5\0"+
    "\31\34\5\0\10\34\1\u012a\17\34\26\0\7\34\5\0"+
    "\10\34\1\u012b\20\34\5\0\30\34\26\0\7\34\5\0"+
    "\13\34\1\u012c\15\34\5\0\30\34\26\0\7\34\5\0"+
    "\1\u012d\30\34\5\0\30\34\26\0\7\34\5\0\4\34"+
    "\1\u012e\24\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\10\34\1\u012f\17\34\26\0\7\34\5\0\31\34"+
    "\5\0\12\34\1\u0130\15\34\26\0\7\34\5\0\31\34"+
    "\5\0\1\u0131\27\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\u012e\23\34\26\0\7\34\5\0\4\34\1\u0132"+
    "\24\34\5\0\30\34\26\0\7\34\5\0\2\34\1\u0133"+
    "\26\34\5\0\30\34\26\0\7\34\5\0\20\34\1\u0134"+
    "\10\34\5\0\30\34\26\0\7\34\5\0\21\34\1\u0135"+
    "\7\34\5\0\30\34\26\0\7\34\5\0\21\34\1\u0136"+
    "\1\u0137\6\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\4\34\1\u0132\23\34\26\0\7\34\5\0\31\34"+
    "\5\0\2\34\1\u0138\25\34\26\0\7\34\5\0\31\34"+
    "\5\0\17\34\1\u0139\10\34\26\0\7\34\5\0\31\34"+
    "\5\0\20\34\1\u013a\7\34\26\0\7\34\5\0\31\34"+
    "\5\0\20\34\1\u013b\1\u013c\6\34\26\0\7\34\5\0"+
    "\10\34\1\u013d\20\34\5\0\30\34\26\0\7\34\5\0"+
    "\4\34\1\u013e\24\34\5\0\30\34\26\0\7\34\5\0"+
    "\1\34\1\u013f\27\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\10\34\1\u0140\17\34\26\0\7\34\5\0"+
    "\31\34\5\0\4\34\1\u0141\23\34\26\0\7\34\5\0"+
    "\31\34\5\0\1\34\1\u0142\26\34\26\0\7\34\5\0"+
    "\4\34\1\u0143\24\34\5\0\30\34\26\0\7\34\5\0"+
    "\14\34\1\u0144\14\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\4\34\1\u0143\23\34\26\0\7\34\5\0"+
    "\31\34\5\0\13\34\1\u0144\14\34\26\0\7\34\5\0"+
    "\21\34\1\u010f\7\34\5\0\30\34\26\0\7\34\5\0"+
    "\1\u0145\30\34\5\0\30\34\26\0\7\34\5\0\1\u0146"+
    "\30\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\20\34\1\u0114\7\34\26\0\7\34\5\0\31\34\5\0"+
    "\1\u0147\27\34\26\0\7\34\5\0\31\34\5\0\1\u0148"+
    "\27\34\26\0\7\34\5\0\31\34\5\0\27\34\1\u0149"+
    "\26\0\7\34\5\0\16\34\1\u014a\12\34\5\0\30\34"+
    "\26\0\1\34\1\u014b\1\34\1\u014c\1\34\1\u014d\1\u014e"+
    "\5\0\4\34\1\u014f\24\34\5\0\30\34\26\0\1\34"+
    "\1\u014b\1\34\1\u014c\1\34\1\u014d\1\u014e\5\0\31\34"+
    "\5\0\4\34\1\u0150\23\34\26\0\7\34\5\0\22\34"+
    "\1\u0151\6\34\5\0\30\34\26\0\7\34\5\0\6\34"+
    "\1\u014e\22\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\21\34\1\u0151\6\34\26\0\7\34\5\0\31\34"+
    "\5\0\6\34\1\u014e\21\34\26\0\7\34\5\0\13\34"+
    "\1\u0152\15\34\5\0\30\34\26\0\7\34\5\0\1\34"+
    "\1\u0153\27\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\12\34\1\u0152\15\34\26\0\7\34\5\0\31\34"+
    "\5\0\1\34\1\u0154\26\34\26\0\7\34\5\0\15\34"+
    "\1\u0155\6\34\1\u0156\4\34\5\0\30\34\26\0\7\34"+
    "\5\0\22\34\1\u0157\6\34\5\0\30\34\26\0\7\34"+
    "\5\0\13\34\1\u0158\15\34\5\0\30\34\26\0\7\34"+
    "\5\0\31\34\5\0\14\34\1\u0159\6\34\1\u015a\4\34"+
    "\26\0\7\34\5\0\31\34\5\0\21\34\1\u015b\6\34"+
    "\26\0\7\34\5\0\31\34\5\0\12\34\1\u015c\15\34"+
    "\26\0\7\34\5\0\21\34\1\u015d\7\34\5\0\30\34"+
    "\26\0\7\34\5\0\23\34\1\u015e\5\34\5\0\30\34"+
    "\26\0\7\34\5\0\31\34\5\0\20\34\1\u015f\7\34"+
    "\26\0\7\34\5\0\20\34\1\u0160\10\34\5\0\30\34"+
    "\26\0\7\34\5\0\2\34\1\u0161\26\34\5\0\30\34"+
    "\26\0\7\34\5\0\10\34\1\u0162\12\34\1\u0163\5\34"+
    "\5\0\30\34\26\0\7\34\5\0\22\34\1\u0164\6\34"+
    "\5\0\30\34\26\0\7\34\5\0\1\34\1\u0165\27\34"+
    "\5\0\30\34\26\0\7\34\5\0\2\34\1\u0166\26\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\17\34"+
    "\1\u0167\10\34\26\0\7\34\5\0\31\34\5\0\2\34"+
    "\1\u0168\25\34\26\0\7\34\5\0\31\34\5\0\10\34"+
    "\1\u0169\11\34\1\u016a\5\34\26\0\7\34\5\0\31\34"+
    "\5\0\21\34\1\u016b\6\34\26\0\7\34\5\0\31\34"+
    "\5\0\1\34\1\u016c\26\34\26\0\7\34\5\0\31\34"+
    "\5\0\2\34\1\u016d\25\34\26\0\7\34\5\0\22\34"+
    "\1\u016e\6\34\5\0\30\34\26\0\7\34\5\0\16\34"+
    "\1\u016f\12\34\5\0\30\34\26\0\7\34\5\0\4\34"+
    "\1\u0170\24\34\5\0\30\34\26\0\7\34\5\0\13\34"+
    "\1\u0171\15\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\21\34\1\u016e\6\34\26\0\7\34\5\0\31\34"+
    "\5\0\15\34\1\u0172\12\34\26\0\7\34\5\0\31\34"+
    "\5\0\4\34\1\u0170\23\34\26\0\7\34\5\0\31\34"+
    "\5\0\12\34\1\u0173\15\34\26\0\7\34\5\0\2\34"+
    "\1\u0174\26\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\2\34\1\u0175\25\34\26\0\7\34\5\0\13\34"+
    "\1\u0176\15\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\12\34\1\u0177\15\34\26\0\7\34\5\0\4\34"+
    "\1\u0178\24\34\5\0\4\34\1\u0178\23\34\26\0\7\34"+
    "\5\0\31\34\5\0\2\34\1\331\25\34\26\0\7\34"+
    "\5\0\31\34\5\0\15\34\1\u0179\12\34\26\0\7\34"+
    "\5\0\31\34\5\0\12\34\1\u017a\15\34\26\0\1\34"+
    "\1\u014b\1\34\1\u014c\1\34\1\u014d\1\u014e\5\0\31\34"+
    "\5\0\4\34\1\u017b\23\34\26\0\7\34\5\0\31\34"+
    "\5\0\22\34\1\u017c\5\34\26\0\7\34\5\0\31\34"+
    "\5\0\3\34\1\u017d\24\34\4\0\14\110\1\u0124\4\110"+
    "\1\u017e\46\110\1\277\37\110\22\0\7\34\5\0\27\34"+
    "\1\u0151\1\34\5\0\30\34\26\0\7\34\5\0\2\34"+
    "\1\u017f\26\34\5\0\30\34\26\0\7\34\5\0\22\34"+
    "\1\u017f\6\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\26\34\1\u0151\1\34\26\0\7\34\5\0\31\34"+
    "\5\0\2\34\1\u017f\25\34\26\0\7\34\5\0\31\34"+
    "\5\0\21\34\1\u017f\6\34\26\0\7\34\5\0\15\34"+
    "\1\u0160\13\34\5\0\30\34\26\0\7\34\5\0\4\34"+
    "\1\u0180\24\34\5\0\30\34\26\0\7\34\5\0\12\34"+
    "\1\u0181\16\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\14\34\1\u0167\13\34\26\0\7\34\5\0\31\34"+
    "\5\0\4\34\1\u0182\23\34\26\0\7\34\5\0\31\34"+
    "\5\0\11\34\1\u0181\16\34\26\0\7\34\5\0\7\34"+
    "\1\u0183\21\34\5\0\30\34\26\0\7\34\5\0\1\u0184"+
    "\30\34\5\0\30\34\26\0\7\34\5\0\21\34\1\u0185"+
    "\7\34\5\0\30\34\26\0\7\34\5\0\22\34\1\u0116"+
    "\6\34\5\0\30\34\26\0\7\34\5\0\10\34\1\u0186"+
    "\20\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\7\34\1\u0183\20\34\26\0\7\34\5\0\31\34\5\0"+
    "\1\u0187\27\34\26\0\7\34\5\0\31\34\5\0\20\34"+
    "\1\u0185\7\34\26\0\7\34\5\0\31\34\5\0\21\34"+
    "\1\u0116\6\34\26\0\7\34\5\0\31\34\5\0\10\34"+
    "\1\u0188\17\34\26\0\7\34\5\0\14\34\1\u0189\14\34"+
    "\5\0\30\34\26\0\7\34\5\0\22\34\1\u018a\6\34"+
    "\5\0\30\34\26\0\7\34\5\0\13\34\1\u018b\15\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\13\34"+
    "\1\u018c\14\34\26\0\7\34\5\0\31\34\5\0\21\34"+
    "\1\u018d\6\34\26\0\7\34\5\0\31\34\5\0\12\34"+
    "\1\u018e\15\34\26\0\7\34\5\0\13\34\1\u018f\15\34"+
    "\5\0\30\34\26\0\7\34\5\0\22\34\1\u0190\6\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\12\34"+
    "\1\u0191\15\34\26\0\7\34\5\0\31\34\5\0\21\34"+
    "\1\u0190\6\34\26\0\7\34\5\0\31\34\5\0\4\34"+
    "\1\u0192\23\34\26\0\7\34\5\0\20\34\1\u0193\10\34"+
    "\5\0\30\34\26\0\5\34\1\u014e\1\34\5\0\31\34"+
    "\5\0\30\34\26\0\2\34\1\u014e\4\34\5\0\31\34"+
    "\5\0\30\34\26\0\4\34\1\u014e\2\34\5\0\31\34"+
    "\5\0\30\34\26\0\7\34\5\0\6\34\1\u0194\11\34"+
    "\1\u0195\10\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\6\34\1\u0196\21\34\26\0\7\34\5\0\4\34"+
    "\1\u0197\24\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\4\34\1\u0198\23\34\26\0\7\34\5\0\22\34"+
    "\1\u0199\6\34\5\0\30\34\26\0\7\34\5\0\1\u019a"+
    "\30\34\5\0\30\34\26\0\7\34\5\0\4\34\1\u019b"+
    "\24\34\5\0\30\34\26\0\7\34\5\0\10\34\1\u019c"+
    "\20\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\21\34\1\u019d\6\34\26\0\7\34\5\0\31\34\5\0"+
    "\1\u019e\27\34\26\0\7\34\5\0\31\34\5\0\4\34"+
    "\1\u019f\23\34\26\0\7\34\5\0\31\34\5\0\10\34"+
    "\1\u01a0\17\34\26\0\7\34\5\0\4\34\1\u01a1\24\34"+
    "\5\0\30\34\26\0\7\34\5\0\20\34\1\u01a2\10\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\4\34"+
    "\1\u01a1\23\34\26\0\7\34\5\0\22\34\1\u014e\6\34"+
    "\5\0\30\34\26\0\7\34\5\0\4\34\1\u01a3\24\34"+
    "\5\0\30\34\26\0\7\34\5\0\15\34\1\u01a4\13\34"+
    "\5\0\30\34\26\0\7\34\5\0\2\34\1\u01a5\26\34"+
    "\5\0\30\34\26\0\7\34\5\0\2\34\1\u01a6\26\34"+
    "\5\0\30\34\26\0\7\34\5\0\16\34\1\u01a7\12\34"+
    "\5\0\30\34\26\0\7\34\5\0\7\34\1\u01a8\21\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\21\34"+
    "\1\u014e\6\34\26\0\7\34\5\0\31\34\5\0\4\34"+
    "\1\u01a3\23\34\26\0\7\34\5\0\31\34\5\0\14\34"+
    "\1\u01a9\13\34\26\0\7\34\5\0\31\34\5\0\2\34"+
    "\1\u01aa\25\34\26\0\7\34\5\0\31\34\5\0\2\34"+
    "\1\u01ab\25\34\26\0\7\34\5\0\31\34\5\0\15\34"+
    "\1\u01ac\12\34\26\0\7\34\5\0\31\34\5\0\7\34"+
    "\1\u01ad\20\34\26\0\7\34\5\0\25\34\1\u01a1\3\34"+
    "\5\0\30\34\26\0\7\34\5\0\4\34\1\u01ae\24\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\24\34"+
    "\1\u01a1\3\34\26\0\7\34\5\0\31\34\5\0\4\34"+
    "\1\u01ae\23\34\26\0\7\34\5\0\7\34\1\u01af\21\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\7\34"+
    "\1\u01b0\20\34\26\0\7\34\5\0\4\34\1\u01b1\24\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\4\34"+
    "\1\u01b1\23\34\26\0\7\34\5\0\31\34\5\0\1\u01b2"+
    "\27\34\26\0\7\34\5\0\31\34\5\0\17\34\1\u01b3"+
    "\10\34\26\0\7\34\5\0\31\34\5\0\22\34\1\u01b4"+
    "\5\34\26\0\7\34\5\0\31\34\5\0\6\34\1\u0196"+
    "\10\34\1\u01b5\10\34\26\0\7\34\5\0\31\34\5\0"+
    "\17\34\1\u01b6\10\34\26\0\7\34\5\0\1\u01b7\30\34"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\1\u01b8"+
    "\27\34\26\0\7\34\5\0\2\34\1\u01b9\26\34\5\0"+
    "\30\34\26\0\7\34\5\0\15\34\1\u01ba\13\34\5\0"+
    "\30\34\26\0\7\34\5\0\31\34\5\0\2\34\1\u01bb"+
    "\25\34\26\0\7\34\5\0\31\34\5\0\14\34\1\u01bc"+
    "\13\34\26\0\7\34\5\0\1\u01bd\30\34\5\0\30\34"+
    "\26\0\7\34\5\0\4\34\1\u01be\24\34\5\0\30\34"+
    "\26\0\7\34\5\0\4\34\1\u0190\24\34\5\0\30\34"+
    "\26\0\7\34\5\0\31\34\5\0\1\u01bf\27\34\26\0"+
    "\7\34\5\0\31\34\5\0\4\34\1\u01be\23\34\26\0"+
    "\7\34\5\0\31\34\5\0\4\34\1\u0190\23\34\26\0"+
    "\7\34\5\0\13\34\1\u01c0\15\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\12\34\1\u01c1\15\34\26\0"+
    "\7\34\5\0\31\34\5\0\14\34\1\u01c2\13\34\26\0"+
    "\7\34\5\0\22\34\1\u01c3\6\34\5\0\30\34\26\0"+
    "\7\34\5\0\4\34\1\u01c4\24\34\5\0\30\34\26\0"+
    "\7\34\5\0\5\34\1\u01c5\23\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\4\34\1\u01c6\23\34\26\0"+
    "\7\34\5\0\20\34\1\u01c7\10\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\17\34\1\u01c7\10\34\26\0"+
    "\7\34\5\0\5\34\1\u01c8\23\34\5\0\30\34\26\0"+
    "\7\34\5\0\22\34\1\u01c9\6\34\5\0\30\34\26\0"+
    "\7\34\5\0\2\34\1\u01ca\26\34\5\0\30\34\26\0"+
    "\7\34\5\0\2\34\1\u01cb\26\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\5\34\1\u01c8\22\34\26\0"+
    "\7\34\5\0\31\34\5\0\21\34\1\u01cc\6\34\26\0"+
    "\7\34\5\0\31\34\5\0\2\34\1\u01cd\25\34\26\0"+
    "\7\34\5\0\31\34\5\0\2\34\1\u01cb\25\34\26\0"+
    "\7\34\5\0\15\34\1\u01ce\13\34\5\0\30\34\26\0"+
    "\7\34\5\0\6\34\1\u016e\22\34\5\0\30\34\26\0"+
    "\7\34\5\0\22\34\1\u01cf\6\34\5\0\30\34\26\0"+
    "\7\34\5\0\7\34\1\u01d0\21\34\5\0\30\34\26\0"+
    "\7\34\5\0\13\34\1\u01d1\15\34\5\0\30\34\26\0"+
    "\7\34\5\0\20\34\1\u01d2\10\34\5\0\30\34\26\0"+
    "\7\34\5\0\31\34\5\0\6\34\1\u016e\21\34\26\0"+
    "\7\34\5\0\31\34\5\0\21\34\1\u01cf\6\34\26\0"+
    "\7\34\5\0\31\34\5\0\7\34\1\u01d0\20\34\26\0"+
    "\7\34\5\0\31\34\5\0\12\34\1\u01d1\15\34\26\0"+
    "\7\34\5\0\31\34\5\0\17\34\1\u01d3\10\34\26\0"+
    "\7\34\5\0\1\u01d4\30\34\5\0\30\34\26\0\7\34"+
    "\5\0\31\34\5\0\1\u01d5\27\34\26\0\7\34\5\0"+
    "\31\34\5\0\2\34\1\u01d6\25\34\26\0\7\34\5\0"+
    "\31\34\5\0\21\34\1\u01c3\6\34\26\0\7\34\5\0"+
    "\31\34\5\0\3\34\1\u01d7\24\34\26\0\7\34\5\0"+
    "\31\34\5\0\5\34\1\u01d8\22\34\26\0\7\34\5\0"+
    "\31\34\5\0\14\34\1\u01ce\13\34\26\0\7\34\5\0"+
    "\15\34\1\u01d9\13\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\14\34\1\u01d9\13\34\26\0\7\34\5\0"+
    "\22\34\1\u01da\6\34\5\0\30\34\26\0\7\34\5\0"+
    "\23\34\1\u01db\5\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\21\34\1\u01dc\6\34\26\0\7\34\5\0"+
    "\31\34\5\0\22\34\1\u01dd\5\34\26\0\7\34\5\0"+
    "\13\34\1\u0190\15\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\12\34\1\u0190\15\34\26\0\7\34\5\0"+
    "\27\34\1\u0183\1\34\5\0\30\34\26\0\7\34\5\0"+
    "\31\34\5\0\26\34\1\u0183\1\34\26\0\7\34\5\0"+
    "\31\34\5\0\20\34\1\u01de\7\34\26\0\7\34\5\0"+
    "\20\34\1\u014e\10\34\5\0\30\34\26\0\7\34\5\0"+
    "\1\u01df\30\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\17\34\1\u014e\10\34\26\0\7\34\5\0\4\34"+
    "\1\u01cb\24\34\5\0\30\34\26\0\7\34\5\0\22\34"+
    "\1\u01e0\6\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\4\34\1\u01cb\23\34\26\0\7\34\5\0\31\34"+
    "\5\0\21\34\1\u01e1\6\34\26\0\7\34\5\0\16\34"+
    "\1\u01e2\12\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\15\34\1\u01e3\12\34\26\0\7\34\5\0\20\34"+
    "\1\u016e\10\34\5\0\30\34\26\0\7\34\5\0\31\34"+
    "\5\0\17\34\1\u016e\10\34\26\0\7\34\5\0\31\34"+
    "\5\0\7\34\1\u01e4\20\34\26\0\7\34\5\0\31\34"+
    "\5\0\4\34\1\u01e5\23\34\26\0\7\34\5\0\31\34"+
    "\5\0\1\u01e6\27\34\26\0\7\34\5\0\4\34\1\u01e7"+
    "\24\34\5\0\30\34\26\0\7\34\5\0\4\34\1\u01e8"+
    "\24\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\u01e9\23\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\u01e8\23\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\u01ea\23\34\26\0\7\34\5\0\2\34\1\u01eb"+
    "\26\34\5\0\30\34\26\0\7\34\5\0\4\34\1\u01ec"+
    "\24\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\u01ed\23\34\26\0\7\34\5\0\15\34\1\u01ee"+
    "\13\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\14\34\1\u01ef\13\34\26\0\7\34\5\0\31\34\5\0"+
    "\2\34\1\u01f0\25\34\26\0\7\34\5\0\20\34\1\u01f1"+
    "\10\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\17\34\1\u01f1\10\34\26\0\7\34\5\0\31\34\5\0"+
    "\21\34\1\u01f2\6\34\26\0\7\34\5\0\4\34\1\u01f3"+
    "\24\34\5\0\30\34\26\0\7\34\5\0\3\34\1\u01cb"+
    "\25\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\3\34\1\u01cb\24\34\26\0\7\34\5\0\10\34\1\u01f4"+
    "\20\34\5\0\30\34\26\0\7\34\5\0\31\34\5\0"+
    "\10\34\1\u01f5\17\34\26\0\7\34\5\0\31\34\5\0"+
    "\4\34\1\u01f3\23\34\26\0\7\34\5\0\30\34\1\u01f6"+
    "\5\0\30\34\26\0\7\34\5\0\31\34\5\0\27\34"+
    "\1\u01f7\26\0\7\34\5\0\4\34\1\u01f8\24\34\5\0"+
    "\30\34\26\0\7\34\5\0\31\34\5\0\4\34\1\u01f9"+
    "\23\34\26\0\7\34\5\0\3\34\1\u017f\25\34\5\0"+
    "\30\34\26\0\7\34\5\0\31\34\5\0\3\34\1\u017f"+
    "\24\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[38896];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\33\1\1\11\23\1\3\11"+
    "\1\1\1\11\1\0\1\11\1\0\2\11\1\0\1\1"+
    "\7\0\140\1\1\0\4\1\1\0\4\1\1\0\1\1"+
    "\3\0\143\1\1\11\1\0\325\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private java_cup.runtime.Symbol symbol(int type) {
        return new java_cup.runtime.Symbol(type, yyline, yycolumn);
    }
    private java_cup.runtime.Symbol symbol(int type, Object value) {
        return new java_cup.runtime.Symbol(type, yyline, yycolumn, value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("ERROR léxico en línea " + (yyline + 1) + 
                      ", columna " + (yycolumn + 1) + 
                      ": Símbolo inválido '" + yytext() + "'");
    return symbol(sym.error); // Token genérico de error
            }
          // fall through
          case 69: break;
          case 2:
            { /* Se ignoran */
            }
          // fall through
          case 70: break;
          case 3:
            { return new Symbol(sym.operLOGICOS, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 71: break;
          case 4:
            { return new Symbol(sym.ARITMETICOS, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 72: break;
          case 5:
            { return new Symbol(sym.COMILLA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 73: break;
          case 6:
            { return new Symbol(sym.parIZQ, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 74: break;
          case 7:
            { return new Symbol(sym.parDER, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 75: break;
          case 8:
            { return new Symbol(sym.COMA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 76: break;
          case 9:
            { return new Symbol(sym.PUNTO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 77: break;
          case 10:
            { return new Symbol(sym.NUMERO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 78: break;
          case 11:
            { return new Symbol(sym.dosPUNTOS, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 79: break;
          case 12:
            { return new Symbol(sym.puntoCOMA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 80: break;
          case 13:
            { return new Symbol(sym.COMPARACION, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 81: break;
          case 14:
            { return new Symbol(sym.ASIGNACION, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 82: break;
          case 15:
            { return new Symbol(sym.ID, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 83: break;
          case 16:
            { return new Symbol(sym.corIZQ, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 84: break;
          case 17:
            { return new Symbol(sym.corDER, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 85: break;
          case 18:
            { return new Symbol(sym.llaveIZQ, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 86: break;
          case 19:
            { return new Symbol(sym.llaveDER, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 87: break;
          case 20:
            { /* Ignorar */
            }
          // fall through
          case 88: break;
          case 21:
            { return new Symbol(sym.STRING, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 89: break;
          case 22:
            { return new Symbol(sym.EMOJI, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 90: break;
          case 23:
            { return new Symbol(sym.INCREDECRE, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 91: break;
          case 24:
            { /* ignora comentarios de línea */
            }
          // fall through
          case 92: break;
          case 25:
            { return new Symbol(sym.controlBUCLE, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 93: break;
          case 26:
            { return new Symbol(sym.preguntaCONDICIONAL, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 94: break;
          case 27:
            { return new Symbol(sym.defineFUNCION, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 95: break;
          case 28:
            { return new Symbol(sym.bucleCONTADOR, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 96: break;
          case 29:
            { return new Symbol(sym.tipoDatoNUM, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 97: break;
          case 30:
            { return new Symbol(sym.tipoDatoVARIABLE, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 98: break;
          case 31:
            { return new Symbol(sym.tipoDatoSET, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 99: break;
          case 32:
            { return new Symbol(sym.tipoDatoTEXT, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 100: break;
          case 33:
            { return new Symbol(sym.intentaERROR, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 101: break;
          case 34:
            { return new Symbol(sym.tipoDatoINMU, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 102: break;
          case 35:
            { return new Symbol(sym.VISIBILIDAD, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 103: break;
          case 36:
            { /* ignora comentarios multilínea */
            }
          // fall through
          case 104: break;
          case 37:
            { return new Symbol(sym.tipoDatoBool, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 105: break;
          case 38:
            { return new Symbol(sym.tipoDatoByte, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 106: break;
          case 39:
            { return new Symbol(sym.casoCONDICIONAL, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 107: break;
          case 40:
            { return new Symbol(sym.tipoDatoCaracter, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 108: break;
          case 41:
            { return new Symbol(sym.sinoCONDICIONAL, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 109: break;
          case 42:
            { return new Symbol(sym.tipoDatoENUM, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 110: break;
          case 43:
            { return new Symbol(sym.tipoDatoLista, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 111: break;
          case 44:
            { return new Symbol(sym.NULO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 112: break;
          case 45:
            { return new Symbol(sym.ESPERA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 113: break;
          case 46:
            { return new Symbol(sym.BOOLEANO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 114: break;
          case 47:
            { return new Symbol(sym.VOID, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 115: break;
          case 48:
            { return new Symbol(sym.rompeCONDICIONAL, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 116: break;
          case 49:
            { return new Symbol(sym.manejaERROR, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 117: break;
          case 50:
            { return new Symbol(sym.CLASS, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 118: break;
          case 51:
            { return new Symbol(sym.tipoDatoNumDecimal, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 119: break;
          case 52:
            { return new Symbol(sym.muestraTEXTO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 120: break;
          case 53:
            { return new Symbol(sym.CHECADOR, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 121: break;
          case 54:
            { return new Symbol(sym.tipoDatoArregloCorte, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 122: break;
          case 55:
            { return new Symbol(sym.tipoDatoTupla, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 123: break;
          case 56:
            { return new Symbol(sym.preguntaWHILE, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 124: break;
          case 57:
            { return new Symbol(sym.ELIMINA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 125: break;
          case 58:
            { return new Symbol(sym.IMPORTACION, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 126: break;
          case 59:
            { return new Symbol(sym.tipoDatoNUMERO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 127: break;
          case 60:
            { return new Symbol(sym.RETORNA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 128: break;
          case 61:
            { return new Symbol(sym.defineESTRUCTURA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 129: break;
          case 62:
            { return new Symbol(sym.seleccionCONDICIONAL, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 130: break;
          case 63:
            { return new Symbol(sym.tipoDatoSimbolo, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 131: break;
          case 64:
            { return new Symbol(sym.PARA, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 132: break;
          case 65:
            { return new Symbol(sym.tomaARCHIVO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 133: break;
          case 66:
            { return new Symbol(sym.siguienteCICLO, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 134: break;
          case 67:
            { return new Symbol(sym.tipoDatoSetInmu, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 135: break;
          case 68:
            { return new Symbol(sym.INTERFAZ, yyline+1, yycolumn+1, yytext());
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
